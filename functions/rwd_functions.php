<?php/* * Copyright (c) 2023. * RW::Software * Dave Conley * https://www.rwscripts.com/ */define('LOGTYPE_LEECH', 1);define('LOGTYPE_DOWNLOAD', 2);//ignore 3//ignore 4require_once ROOT_PATH . "/engine/global_functions.php";class rwdfunc extends func{	function rwdfunc()	{		global $OUTPUT;	}	function updateNavDL($nav, $symid, $isAdmin = 0)	{		global $DB, $rwdInfo, $sid;		$DB->query("SELECT l.name, sym.sym_catid FROM dl_symlinks sym                    LEFT JOIN dl_links l ON (l.did=sym.sym_did)                    WHERE sym.sym_id={$symid}");		if ((!$myrow = $DB->fetch_row()))			$this->error(GETLANG("er_nonavdlid"));		if ($isAdmin)			$nav = " > <a href='admin.php?sid=$sid&area=files&act=editdl&id=$symid'>{$myrow['name']}</a>" . $nav;		else			$nav = " > <a href='index.php?dlid=$symid'>{$myrow['name']}</a>" . $nav;		$rwdInfo->currentPageName = $myrow['name'];		$nav = $this->updateNav($nav, $myrow["sym_catid"], $isAdmin);		return $nav;	}	function updateNav($nav, $id, $isAdmin = 0)	{		global $DB, $rwdInfo, $CONFIG, $sid;		//if ( $nav )		//$nav = " > ".$nav;		if ($id) {			if (!$rwdInfo->cats_saved) {				$DB->query("SELECT * FROM dl_categories");				if ($myrow = $DB->fetch_row()) {					do {						// Add category to cache						$rwdInfo->cat_cache[$myrow["cid"]] = $myrow;					} while ($myrow = $DB->fetch_row());				}				$rwdInfo->cats_saved = 1;			}			$nav = $this->navFindCat($rwdInfo->cat_cache, $id, $nav, $isAdmin);		}		if (!$rwdInfo->currentPageName)			$rwdInfo->currentPageName = $nav;		if ($isAdmin)			return $rwdInfo->nav = "<a href='" . $rwdInfo->url . "/admin.php?sid=$sid&area=main&act=home'>" . GETLANG("nav_adhome") . "</a>" . $nav;		else			return $rwdInfo->nav = "<a href='" . $rwdInfo->url . "/index.php'>" . GETLANG("nav_home") . "</a>" . $nav;	}	function navFindCat($array, $id, $nav, $isAdmin)	{		global $rwdInfo, $sid, $std;		foreach ($array as $cat) {			if ($id == 0)				break;			if ($cat["cid"] == $id) {				if ($isAdmin)					$nav = " > <a href='" . $rwdInfo->url . "/admin.php?sid=$sid&area=files&act=edit&cid=$id'>" . $cat["name"] . "</a>" . $nav;				else					$nav = " > <a href='" . $rwdInfo->url . "/index.php?cid=$id'>" . $cat["name"] . "</a>" . $nav;				if (!$rwdInfo->currentPageName)					$rwdInfo->currentPageName = $cat["name"];				if ($std->isUsingFullVersion())					$id = $cat["parentid"];				else					$id = 0;				$nav = $this->navFindCat($array, $id, $nav, $isAdmin);				break;			}		}		return $nav;	}	/*************************************************************************	 *    Drop down box containing categories and sub categories	 *************************************************************************/	function catListBox($category = array(), $boxname, $permCol = "canBrowse", $showAll = 0, $type = "norm")	{		global $DB, $rwdInfo;		if (!$rwdInfo->cats_saved) {			$DB->query("SELECT * FROM dl_categories");			if ($myrow = $DB->fetch_row()) {				do {					// Add category to cache					$rwdInfo->cat_cache[$myrow["cid"]] = $myrow;				} while ($myrow = $DB->fetch_row());			}			$rwdInfo->cats_saved = 1;		}		if (count($rwdInfo->cat_cache) > 0) {			if ($type == "multi")				$output = "<select name='$boxname' size='5' multiple='multiple'>";			else {				$output = "<select name='$boxname'>";				$output .= "<option value='0'>" . GETLANG("nav_home") . "</option>";				$output .= "<option value='0'>----------</option>";			}		} else			$output = GETLANG("nobasecat");		foreach ($rwdInfo->cat_cache as $cat) {			if ($cat["parentid"] == 0) {				$skipOutput = false;				// If user has no browse permissions then skip this category				if (!$showAll and (($permCol == "canMove") and !$this->canModerate($permCol, $cat["cid"])))					$skipOutput = true;				else if (!$showAll and $permCol != "canMove" and !$this->canAccess($cat["cid"], $permCol)) {					$skipOutput = true;				}				if (!$skipOutput) {					$output .= "<option value='" . $cat["cid"] . "'";					if (!empty($category)) {						foreach ($category as $c) {							if ($c == $cat["cid"])								$output .= " selected";						}					}					$output .= ">" . $cat["name"] . "</option>\n";				}				$output .= $this->getSubCats($cat["cid"], $category, " +", $permCol, $showAll);			}		}		if (count($rwdInfo->cat_cache) > 0)			$output .= "</select>";		return $output;	}	/*************************************************************************	 *    Function used for recursion through subcats	 *************************************************************************/	function getSubCats($parent = 0, $category = array(), $prefix, $permCol, $showAll = 0)	{		global $DB, $rwdInfo;		if (!$parent)			return;		$output = "";		foreach ($rwdInfo->cat_cache as $cat) {			if ($cat["parentid"] == $parent) {				$skipOutput = false;				// If user has no browse permissions then skip this category				if (!$showAll and (($permCol == "canMove") and !$this->canModerate($permCol, $cat["cid"])))					$skipOutput = true;				else if (!$showAll and $permCol != "canMove" and !$this->canAccess($cat["cid"], $permCol))					$skipOutput = true;				if (!$skipOutput) {					$output .= "<option value='" . $cat["cid"] . "'";					if (!empty($category)) {						foreach ($category as $c) {							if ($c == $cat["cid"])								$output .= " selected";						}					}					$output .= ">$prefix {$cat['name']}</option>\n";					$oldPrefix = $prefix;					$prefix .= " +";				}				$output .= $this->getSubCats($cat["cid"], $category, $prefix, $permCol, $showAll);				$prefix = $oldPrefix;			}		}		return $output;	}	function averageRating($id = 0)	{		global $DB;		$total = 0;		$result = $DB->query("SELECT * FROM dl_rating WHERE dlid='$id' AND rating>0");		if ($rows = $DB->num_rows($result)) {			for ($x = 0; $x < $rows; $x++) {				$myrow = $DB->fetch_row($result);				$total += $myrow["rating"];			}			$total /= $rows;		} else			$total = 0;		$update = array("userrating" => "$total",			"votes" => $rows);		$result = $DB->update($update, "dl_links", "did=$id");	}	function updateLimits($user, $doUpdate = 1)	{		global $DB, $guser;		$timeNow = time();		$bwEndTime = $user["limitSizePeriod"];		$fileEndTime = $user["limitFilesPeriod"];		// Set the offset		if ($user["limitSizePeriod"] == 0)       // Per day			$offset = 86400;		else if ($user["limitSizePeriod"] == 1) // Per week			$offset = 604800;		else if ($user["limitSizePeriod"] == 2) // Per month			$offset = 2419200;		else if ($user['limitSizePeriod'] == 3) // Per hour			$offset = 3600;		$updated = false;		if ($user["dlLimitSize"] and $user["resetOnExpire"]) {			//echo "$bwEndTime < $timeNow<br>";			while ($bwEndTime < $timeNow) {				if (!$bwEndTime)					$bwEndTime = $timeNow;				$bwEndTime += $offset;				$updated = true;			}			if ($updated) {				$user["dlLimitSize"] = ($user["dlLimitSize"]) ? $user["dlLimitSize"] : 0;				$user["limitSizePeriod"] = ($bwEndTime) ? $bwEndTime : 0;			}		}		$updated2 = false;		// Set the offset		if ($user["limitFilesPeriod"] == 0)       // Per day			$offset = 86400;		else if ($user["limitFilesPeriod"] == 1) // Per week			$offset = 604800;		else if ($user["limitFilesPeriod"] == 2) // Per month			$offset = 2419200;		else if ($user['limitFilesPeriod'] == 3) // Per hour			$offset = 3600;		if ($user["dlLimitFiles"] and $user["resetOnExpire"]) {			while ($fileEndTime < $timeNow) {				if (!$fileEndTime)					$fileEndTime = $timeNow;				$fileEndTime += $offset;				$updated2 = true;			}			if ($updated2) {				$user["dlLimitFiles"] = ($user["dlLimitFiles"]) ? $user["dlLimitFiles"] : 0;				$user["limitFilesPeriod"] = ($fileEndTime) ? $fileEndTime : 0;			}		}		// So mySQL 5 doesn't like '' in an int field so I need to make sure it's a valid number		$user["dlLimitFiles"] = intval($user["dlLimitFiles"]);		$user["dlLimitSize"] = intval($user["dlLimitSize"]);		$user["limitFilesPeriod"] = intval($user["limitFilesPeriod"]);		$user["limitSizePeriod"] = intval($user["limitSizePeriod"]);		if (($updated || $updated2) and $doUpdate) {			$update = array("dlLimitFiles" => $user["dlLimitFiles"],				"dlLimitSize" => $user["dlLimitSize"],				"limitFilesPeriod" => $user["limitFilesPeriod"],				"limitSizePeriod" => $user["limitSizePeriod"]);			$DB->update($update, "dl_memberextra", "mid={$user[$guser->db_id]}");		}		return $user;	}	// To be called after any move or delete operation	function resyncCats($cid)	{		global $DB, $rwdInfo;		$catq = $DB->query("SELECT * FROM dl_categories WHERE cid={$cid}");		$thiscat = $DB->fetch_row($catq);		$best["id"] = "0";		$best["time"] = "0";		$best["name"] = "";		$num_files = 0;		$result = $DB->query("SELECT l.did,l.name,l.date, sym.sym_id FROM dl_symlinks sym								LEFT JOIN dl_links l ON (l.did=sym.sym_did)								WHERE sym.sym_catid={$cid} AND l.approved=1 ORDER BY `date` DESC");		$last_upload = $DB->fetch_row($result);		$num_files += $DB->num_rows($result);		$update = array();		if ($last_upload) {			$update = array("lastid" => $last_upload['sym_id'],				"lastTitle" => $last_upload["name"],				"lastDate" => $this->converttotime($last_upload['date']),				"downloads" => $num_files);		} else {			$update = array("lastid" => 0,				"lastTitle" => "",				"lastDate" => 0,				"downloads" => 0);		}		$DB->update($update, "dl_categories", "cid=$cid");		// Update the cache		foreach ($update as $k => $v) {			$rwdInfo->cat_cache[$cid][$k] = $v;		}	}	function canAccess($catId, $column)	{		global $CONFIG, $rwdInfo, $guser, $std, $DB;		if (!$std->isUsingFullVersion()) {			return true;		}		if (!$rwdInfo->cat_cache[$catId]) {			$catres = $DB->query("SELECT * FROM dl_categories WHERE cid=" . $catId);			$catrow = $DB->fetch_row();			$rwdInfo->cat_cache[$catId] = $catrow;		}		if ($rwdInfo->cat_cache[$catId]) {			if ($this->hasPerms($rwdInfo->cat_cache[$catId][$column], $guser->userlevel))				return true;			else				return false;		} else {			$this->info(GETLANG("er_nonexistantcat") . $catID);			return false;		}		return false;	}	function canEdit($owner, $catid = array())	{		global $guser;		// If is global moderator then return true straight away		if ($guser->getPermissions() & k_moderateAll)			return true;		// If we're here then user must be able to moderate own		if ($guser->getPermissions() & k_moderateOwn and $owner == $guser->userid)			return true;		// Check if we are a moderator		foreach ($guser->moderator as $mod) {			if (!empty($catid)) {				foreach ($catid as $c) {					if ($mod['canedit'] == 1 and $mod['catid'] == $c)						return true;				}			}		}		// User has no super human powers what so ever. Bless		return false;	}	function groupCanModerate($flag, $id = -1)	{		global $guser;		if ($guser->getPermissions() & $flag and $id == $guser->userid)			return true;		return false;	}	function canModerate($table, $catid = -1)	{		global $guser;		$res = false;		// Check if we are a moderator		if (!empty($guser->moderator)) {			foreach ($guser->moderator as $mod) {				if ($mod[$table] == 1 and $mod['catid'] == $catid)					return true;			}			return false;		}		// If is global moderator then return true		if ($guser->getPermissions() & k_moderateAll)			return true;		// User has no super human powers what so ever. Bless		return false;	}	function canDownloadFiles($dlrow)	{		global $DB, $rwdInfo;		$cid = $dlrow["sym_catid"];		if ($this->canAccess($cid, "canDL"))			return true;		else			return false;	}	function userBar()	{		global $CONFIG, $OUTPUT, $rwdInfo, $std, $guser;		$OUTPUT->load_template("skin_global");		if (!$std->isUsingFullVersion()) {			$rwdInfo->userbar = "";			return;		}		if ($guser->isGuest) {			$data = array("username" => $guser->username,				"canRegister" => $CONFIG['allowRegister'],				"regLink" => $guser->reg_link);			$user_details = $rwdInfo->skin_global->guestbar($data);		} else {			$data = array("username" => $guser->username,				"isAdmin" => $guser->isAdmin);			$user_details = $rwdInfo->skin_global->memberbar($data);		}		$rwdInfo->userbar = $user_details;	}	function userOptions()	{		global $CONFIG, $OUTPUT, $rwdInfo, $guser, $std;		$data = array("canUpload" => $this->canUploadFiles(),			"canSearch" => $this->canSearch());		if (!$std->isUsingFullVersion()) {			$data['canSearch'] = false;		}		$OUTPUT->load_template("skin_global");		$rwdInfo->links = $rwdInfo->skin_global->useroptions($data);	}	function isExternalFile($filename)	{		if (stristr($filename, "http://") || stristr($filename, "ftp://") || stristr($filename, "https://"))			return TRUE;		else			return FALSE;	}	function authSortValue($val = "")	{		if ($val == "date" || $val == "author" || $val == "name" || $val == "downloads")			return $val;		else			return "";	}	function recountGroupMembers($gid)	{		global $DB;		$DB->query("SELECT `id` FROM `dl_users` WHERE `group`='{$gid}'");		$num = $DB->num_rows();		$DB->query("UPDATE `dl_groups` SET `users` = '{$num}' WHERE `gid`='{$gid}'");	}	function authOrderValue($val = "")	{		if ($val == "DESC")			return $val;		else if ($val == "ASC")			return $val;		else			return "";	}	function addLeechLog($symid, $name)	{		global $DB, $CONFIG, $IN, $std, $guser;		if ($CONFIG["logleechedfiles"] and $std->isUsingFullVersion()) {			$data = array("type" => LOGTYPE_LEECH,        // Type is leeched files				"file" => $symid,				"filename" => $name,				"referer" => $IN['referer'],				"time" => time(),				"IP" => $IN['ipaddr'],				"userid" => $guser->userid);			$this->add_data_to_logs($data);		}	}	function addDownloadLog($symid, $name)	{		global $DB, $CONFIG, $IN, $std, $guser;		if ($CONFIG["logdownloadedfiles"] and $std->isUsingFullVersion()) {			$insert = array("type" => LOGTYPE_DOWNLOAD,				"file" => $symid,				"filename" => $name,				"referer" => $IN['referer'],				"time" => time(),				"IP" => $IN['ipaddr'],				"userid" => $guser->userid);			$this->add_data_to_logs($insert);		}	}}?>