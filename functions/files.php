<?php/* * Copyright (c) 2023. * RW::Software * Dave Conley * https://www.rwscripts.com/ */$loader = new files();require_once ROOT_PATH . "/engine/captcha.php";class files{	var $html;	var $output;	function files()	{		global $IN, $OUTPUT, $std;		$this->html = $OUTPUT->load_template("skin_files");		if (is_array($IN['dlid'])) {			for ($i = 0; $i < count($IN["dlid"]); $i++) {				$IN['dlid'][$i] = intval($IN['dlid'][$i]);			}		} else if ($IN['dlid']) {			$IN['dlid'] = intval($IN['dlid']);		}		switch ($IN["ACT"]) {			case 'useradddl':				$this->upload();				break;			case 'ratefile':				if ($std->isUsingFullVersion())					$this->rateFile($IN["dlid"]);				break;			case 'addcomment':				if ($std->isUsingFullVersion())					$this->addComment($IN["dlid"]);				break;			case 'editcomment':				if ($std->isUsingFullVersion())					$this->edit_comment();				break;			case 'deletecomment':				if ($std->isUsingFullVersion())					$this->delete_comment();				break;			case 'email':				if ($std->isUsingFullVersion())					$this->email($IN["dlid"]);				break;			case 'report':				if ($IN['blid']) {					$IN['blid'] = intval($IN['blid']);				}				$this->report($IN["blid"]);				break;			case 'editdl':			case 'deleteimg':				$this->editdl();				break;			case 'deletedl':				$this->deletedl();				break;			case 'massmod':				$this->files_massmod();				break;		}	}	// List all files in this category	function listAll($catID = 0)	{		global $DB, $IN, $CONFIG, $rwdInfo, $guser, $std, $module;		if (!$IN["sortvalue"])			$sortvalue = $CONFIG["default_sort"];		else			$sortvalue = $std->authSortValue($IN["sortvalue"]);		if (!$IN["order"])			$order = $CONFIG["default_order"];		else			$order = $std->authOrderValue($IN["order"]);		if (!$IN["limit"])			$limit = 0;		else			$limit = intval($IN["limit"]);		$catID = intval($catID);		// Set category data if not already saved... which it probably should be		if (!$rwdInfo->cat_cache[$catID]) {			$catres = $DB->query("SELECT * FROM dl_categories WHERE cid='{$catID}'");			$catrow = $DB->fetch_row();			$rwdInfo->cat_cache[$catID] = $catrow;		}		if ($std->isUsingFullVersion()) {			// Attempt to get custom download field data			$customFields = array();			if ($CONFIG['doCustomFields']) {				$DB->query("SELECT * FROM dl_custom");				while ($cfrow = $DB->fetch_row()) {					$index = "custom_" . $cfrow['cid'];					$customFields[$index] = $cfrow;				}			}		}		$moduleleftjoins = $module->files_listAllLeftJoins($catID);		$result = $DB->query("SELECT l.*, cd.*, sym.*				    FROM `dl_symlinks` sym					LEFT JOIN `dl_links` l ON (l.did=sym.sym_did)					LEFT JOIN `dl_custom_data` cd ON (cd.uid=l.did)                    $moduleleftjoins				    WHERE sym.sym_catid='$catID' AND l.approved='1'				    ORDER BY `pinned` DESC, $sortvalue $order LIMIT $limit , {$CONFIG['links_per_page']}");		/*, img.realName, img.size, img.id LEFT JOIN (								SELECT realName, size, id								FROM `dl_images` img WHERE img.dlid=l.did LIMIT 1								) AS img*/		// PHP 5 only. DOH!		/* LEFT OUTER JOIN `dl_images` i ON (i.dlid=l.did) AND i.id = ( select max(id) from `dl_images` WHERE dlid = l.did ) */		$pages = $std->pages($rwdInfo->cat_cache[$catID]["downloads"], $CONFIG["links_per_page"], "?cid=$catID&amp;sortvalue=$sortvalue&amp;order=$order");		$order_box = $this->order_box($catID, $sortvalue, $order);		$numfiles = $DB->num_rows();		if (($filerow = $DB->fetch_row())) {			$modoptions = $this->modoptions($catID);			$data = array("cat_name" => $rwdInfo->cat_cache[$catID]["name"],				"order_boxes" => $order_box,				"mod_options" => $modoptions,				"pages" => $pages,				"catid" => $catID);			if ($std->isUsingFullVersion() and !empty($customFields)) {				foreach ($customFields as $i => $j) {					$data[$i . "_caption"] = $j['caption'];				}			}			$this->output .= $module->html_skincall("cat_listing_head", $this->html, $data);			if ($modoptions)				$domod = 1;			else				$domod = 0;			do {				$data = $this->parse_file_data($filerow, $customFields, 0, 0, $domod);				$data = $std->my_stripslashes($data);				$this->output .= $module->html_skincall("cat_listing_row", $this->html, $data);			} while ($filerow = $DB->fetch_row($result));			$data = array("mod_options" => $modoptions,				"order_boxes" => $order_box,				"pages" => $pages,				"cid" => $catID);			$this->output .= $module->html_skincall("cat_listing_foot", $this->html, $data);		}		return $numfiles;	}	function report($symid)	{		global $CONFIG, $IN, $DB, $OUTPUT, $rwdInfo, $module, $std, $guser;		$std->AssertUsingFullVersion();		if ($symid == "") {			$std->error(GETLANG("er_noid"));			return;		}		$std->updateNavDL(" > " . GETLANG("report"), $symid);		$result = $DB->query("SELECT l.*, sym.*					FROM dl_symlinks sym					LEFT JOIN dl_links l ON (l.did=sym.sym_did)					WHERE sym.sym_id=$symid");		if (!$myrow = $DB->fetch_row($result)) {			$std->error(GETLANG("er_nofile"));			return;		}		$dlid = $myrow['did'];		// If user has no browse permissions then skip this category		if (!$std->canAccess($myrow["sym_catid"], "canBrowse")) {			$std->error(GETLANG("er_noaccess"));			return;		}		if ($IN["confirm"]) {			if ($guser->isGuest and $CONFIG['captcha_report']) {				// Check valid catcha code				require_once ROOT_PATH . "/engine/captcha.php";				$captcha = new captcha();				if (!$captcha->checkValid($IN['captchaid'])) {					$std->error(GETLANG("er_dodgykeyentered"));					return;				}			}			require_once(ROOT_PATH . "/engine/mime/htmlMimeMail.php");			$link = $rwdInfo->url . "/index.php?dlid=" . $symid;			$mail = new htmlMimeMail();			$text = str_replace("{username}", $guser->username, $CONFIG['email_report_msg']);			$text = str_replace("{linkurl}", $link, $text);			$text = str_replace("{siteurl}", $rwdInfo->url, $text);			$text = str_replace("{comments}", $IN['reason'], $text);			$mail->setText($text);			$mail->setReturnPath($CONFIG["email"]);			$from = "'{$CONFIG['email_sender']}' <" . $CONFIG["email"] . ">";			$mail->setFrom($from);			$mail->setSubject('Broken Link');			$mail->setHeader('RW::Scripts', 'RW::Download');			$result = $mail->send(array($CONFIG["email"]), $CONFIG['mailtype']);			$std->info(GETLANG("reported") . "<p>" . "<a href='index.php?dlid=$symid'>" . GETLANG("continue") . "</a>");		} else if ($IN["cancel"]) {			$std->info(GETLANG("reportcancel") . "<p>" . "<a href='index.php?dlid=$symid'>" . GETLANG("continue") . "</a>");		} else {			$data = array("report_post" => "index.php?ACT=report&amp;blid=$symid");			if ($guser->isGuest and $CONFIG['captcha_report']) {				require_once ROOT_PATH . "/engine/captcha.php";				$captcha = new captcha();				$id = $captcha->createImage();				$data['captcha'] = "index.php?ACT=regbotimg&amp;rc={$id}";				$data['captchaid'] = $id;			}			$this->output .= $module->html_skincall("report_form", $this->html, $data);		}		$OUTPUT->add_output($this->output);	}	function email($symid)	{		global $guser, $std, $rwdInfo, $module, $CONFIG, $DB, $IN, $OUTPUT;		$std->AssertUsingFullVersion();		if ($symid == "") {			$std->error(GETLANG("er_noid"));			return;		}		if (!$CONFIG["email_a_friend"]) {			$std->error(GETLANG("er_feature_disabled"));			return;		}		$std->updateNavDL(" > " . GETLANG("emaillink"), $symid);		$result = $DB->query("SELECT l.*, sym.*					FROM dl_symlinks sym					LEFT JOIN dl_links l ON (l.did=sym.sym_did)					WHERE sym.sym_id=$symid");		if (!$myrow = $DB->fetch_row($result)) {			$std->error(GETLANG("er_nofile"));			return;		}		$dlid = $myrow['did'];		// If user has no browse permissions then skip this category		if (!$std->canAccess($myrow["sym_catid"], "canBrowse")) {			$std->error(GETLANG("er_noaccess"));			return;		}		if ($IN["send_email"]) {			if ($guser->isGuest and $CONFIG['captcha_email']) {				// Check valid catcha code				require_once ROOT_PATH . "/engine/captcha.php";				$captcha = new captcha();				if (!$captcha->checkValid($IN['captchaid'])) {					$std->error(GETLANG("er_dodgykeyentered"));					return;				}			}			if (!$std->emailvalidate($IN["email"])) {				$std->error(GETLANG("invalidemail"));				return;			}			if (!$std->emailvalidate($IN["remail"])) {				$std->error(GETLANG("invalidemail2"));				return;			}			include_once(ROOT_PATH . "/engine/mime/htmlMimeMail.php");			$link = $rwdInfo->url . "/index.php?dlid=" . $symid;			$mail = new htmlMimeMail();			$text = str_replace("{username}", $IN['name'], $CONFIG['email_friend_msg']);			$text = str_replace("{friend}", $IN['rname'], $text);			$text = str_replace("{linkurl}", $link, $text);			$text = str_replace("{message}", $IN['message'], $text);			$mail->setText($text);			$mail->setReturnPath($IN["email"]);			$from = $IN["name"] . " <" . $IN['email'] . ">";			$mail->setFrom($from);			$mail->setSubject('Recommended Download');			$mail->setHeader('RW::Scripts', 'RW::Download');			$result = $mail->send(array($IN["remail"]), $CONFIG['mailtype']);			$std->info(GETLANG("emailsuccess") . "<br>" . "<a href='index.php?dlid=$symid'>" . GETLANG("continue") . "</a>");		} else {			if (!$guser->isGuest) {				$data = array("post" => "<form method='post' enctype='multipart/form-data' action='index.php?ACT=email&amp;dlid={$symid}'>",					"username" => $guser->username,					"email" => $guser->userdetails[$guser->db_email]);			} else {				$data = array("post" => "<form method='post' enctype='multipart/form-data' action='index.php?ACT=email&amp;dlid={$symid}'>",					"username" => "",					"email" => "");			}			if ($guser->isGuest and $CONFIG['captcha_email']) {				require_once ROOT_PATH . "/engine/captcha.php";				$captcha = new captcha();				$id = $captcha->createImage();				$data['captcha'] = "index.php?ACT=regbotimg&amp;rc={$id}";				$data['captchaid'] = $id;			}			$this->output .= $module->html_skincall("emailFriend", $this->html, $data);		}		$OUTPUT->add_output($this->output);	}	function rateFile($symid)	{		global $DB, $IN, $std;		$std->AssertUsingFullVersion();		$std->updateNavDL(" > " . GETLANG("ratefile"), $symid);		$ip = $IN["ipaddr"];		$result = $DB->query("SELECT l.*, sym.*					FROM dl_symlinks sym					LEFT JOIN dl_links l ON (l.did=sym.sym_did)					WHERE sym.sym_id=$symid");		if (!$myrow = $DB->fetch_row($result)) {			$std->error(GETLANG("er_nofile"));			return;		}		$dlid = $myrow['did'];		// If user has no browse permissions then skip this category		if (!$std->canAccess($myrow["sym_catid"], "canBrowse")) {			$std->error(GETLANG("er_noaccess"));			return;		}		$result = $DB->query("SELECT * FROM dl_rating WHERE dlid='$dlid' AND ip='$ip'");		if ($rows = $DB->num_rows($result))			$std->warning(GETLANG("warn_alreadyrated"));		else {			$insert = array("dlid" => $dlid,				"ip" => $ip,				"rating" => $IN["uc_rating"]);			$result = $DB->insert($insert, "dl_rating");			$std->averageRating($dlid);			$std->info(GETLANG("filerated") . "<br>" . "<a href='index.php?dlid=$symid'>" . GETLANG("continue") . "</a>");		}	}	//	// Show extended details on this file	//	function show($symid)	{		global $IN, $DB, $CONFIG, $OUTPUT, $std, $guser, $module;		$sql['select'] = "l.*, cd.*, ft.*, sym.*, i.*";		$sql['from'] = "dl_symlinks sym ";		$sql['leftjoin'] = "LEFT JOIN dl_links l ON (l.did=sym.sym_did)                    LEFT JOIN dl_custom_data cd ON (cd.uid=sym.sym_did)                    LEFT JOIN dl_filetypes ft ON (ft.mimetype=l.fileType)                    LEFT OUTER JOIN dl_images i ON (i.dlid=l.did) ";		$sql['where'] = "sym.sym_id='{$symid}' ";		$sql = $module->files_showFileSQL($sql, $symid);		$result = $DB->query("SELECT {$sql['select']}                    FROM {$sql['from']}                    {$sql['leftjoin']}                    WHERE {$sql['where']}");		if (!$myrow = $DB->fetch_row($result)) {			$std->error(GETLANG("er_nofile"));			return;		}		$dlid = $myrow['did'];		// Show comment form		if ($IN["addcomment"] and ($std->isUsingFullVersion())) {			$this->addComment($symid);			return;		}		if ($std->isUsingFullVersion()) {			// Attempt to get custom download field data			$customFields = array();			if ($CONFIG['doCustomFields']) {				$DB->query("SELECT * FROM dl_custom");				while ($cfrow = $DB->fetch_row()) {					$index = "custom_" . $cfrow['cid'];					$customFields[$index] = $cfrow;				}			}		}		$std->updateNavDl("", $symid);		// If user has no browse permissions then skip this category		if (!$std->canAccess($myrow["sym_catid"], "canBrowse")) {			$std->error(GETLANG("er_noaccess"));			return;		}		if ($myrow['approved'] == 0) {			if ($guser->userid == $myrow['owner'] || $guser->isAdmin) {				$this->output .= $std->info(GETLANG("warn_unapp"));			} else				$std->error(GETLANG("er_unappfile"));		}		// Update view count		$DB->query("UPDATE `dl_links` SET `views` = views+1 WHERE `did` = '$dlid'");		$data = array();		$data = $this->parse_file_data($myrow, $customFields, 0, 0, 0, false);		$data = $std->my_stripslashes($data);		if ($std->isUsingFullVersion()) {			$data["adminrating"] = GETLANG("cap_adRate") . ": " . $data["adminrating"];			$data["userrating"] = GETLANG("cap_userRate") . ": " . $data["userrating"];		}		if (!$IN["limit"])			$limit = 0;		else			$limit = intval($IN["limit"]);		if ($std->isUsingFullVersion()) {			$toplimit = $CONFIG["comments_per_page"];			$result2 = $DB->query("SELECT * FROM dl_comments WHERE did={$dlid} ORDER BY `date` {$CONFIG['default_c_order']} LIMIT $limit , $toplimit");			if ($myrow2 = $DB->fetch_row($result2)) {				$rows = $myrow["comments"];				$pages = $std->pages($rows, $CONFIG["comments_per_page"], "?dlid=$symid");				$cdata = array("pages" => "$pages");				$comment_contents .= $module->html_skincall("comment_head", $this->html, $data);				do {					$date = $std->convertDate($myrow2["date"]);					if ($myrow2["email"])						$user = "<b>" . $myrow2["name"] . "</b>";					else						$user = $myrow2["name"];					if ($myrow2["rating"] and ($std->isUsingFullVersion()))						$rating = $myrow2["rating"];					else						$rating = GETLANG("notrated");					if ($std->canModerate("edit_comments", $myrow["sym_catid"]) ||						$std->groupCanModerate(k_editComments, $myrow2["uid"]))						$cEdit = "<a href='index.php?ACT=editcomment&amp;did={$symid}&amp;id={$myrow2['id']}'>" . GETLANG("edit") . "</a>";					if ($std->canModerate("del_comments", $myrow["sym_catid"]) ||						$std->groupCanModerate(k_delComments, $myrow2["uid"]))						$cDelete = "<a href='index.php?ACT=deletecomment&amp;did={$symid}&amp;id={$myrow2['id']}'>" . GETLANG("delete") . "</a>";					$cdata = array("date" => "$date",						"user" => "$user",						"comment" => $OUTPUT->rwWordWrap($myrow2["comments"]),						"edit" => "$cEdit",						"delete" => "$cDelete");					$comment_contents .= $module->html_skincall("comment_row", $this->html, $cdata);				} while ($myrow2 = $DB->fetch_row($result2));				$cdata = array("pages" => "$pages");				$comment_contents .= $module->html_skincall("comment_foot", $this->html, $cdata);				$comment = array("comments" => $comment_contents);				$commentblock = $module->html_skincall("comment_block", $this->html, $comment);				$data["comments_block"] = $commentblock;			}		}		$this->output .= $module->html_skincall("file_view", $this->html, $data);	}	function delete_comment()	{		global $IN, $DB, $std, $OUTPUT;		$std->AssertUsingFullVersion();		$symid = intval($IN['did']);		$id = intval($IN['id']);		$DB->query("SELECT sym.*, l.*                    FROM `dl_symlinks` sym                    LEFT JOIN `dl_links` l ON (l.did=sym.sym_did)                    WHERE sym.sym_id='{$symid}'");		$myrow2 = $DB->fetch_row();		$dlid = $myrow2['did'];		$std->updateNavDL(" > " . GETLANG("editcomment"), $symid);		$DB->query("SELECT * FROM dl_comments WHERE `id`='{$id}'");		if (!$myrow = $DB->fetch_row()) {			$std->error(GETLANG("er_nocomment"));			return;		}		if (!$std->canModerate("del_comments", $myrow2['sym_catid']) and			!$std->groupCanModerate(k_delComments, $myrow['uid'])) {			$std->error(GETLANG("er_noperms"));			return;		}		if ($IN["confirm"]) {			$DB->query("DELETE FROM `dl_comments` WHERE id=$id");			$DB->query("UPDATE `dl_links` SET comments=comments-1 WHERE did={$dlid}");			$OUTPUT->add_output(GETLANG("delcomment") . "<br><br>");			$OUTPUT->add_output("+ <a href='index.php?dlid={$symid}'>" . GETLANG("backto") . " {$myrow2['name']}</a><br>");			$std->addAdminLog("Deleted comment");			return;		} else if ($IN["cancel"]) {			$OUTPUT->add_output(GETLANG("delcancel") . "<br><br>");			$OUTPUT->add_output("+ <a href='index.php?dlid={$symid}'>" . GETLANG("backto") . " {$myrow2['name']}</a><br>");			return;		} else {			$std->warning(GETLANG("warn_commentdel") . "<p>"				. "<form method='post' action='index.php?ACT=deletecomment'>"				. "<input type='hidden' name='id' value='" . $IN["id"] . "'>"				. "<input type='hidden' name='did' value='" . $IN["did"] . "'>"				. "<input type='Submit' name='confirm' value='" . GETLANG("yes") . "'> <input type='Submit' name='cancel' value='" . GETLANG("no") . "'> </form>");		}	}	function edit_comment()	{		global $IN, $DB, $OUTPUT, $std, $module, $guser;		$std->AssertUsingFullVersion();		$symid = intval($IN['did']);		$id = intval($IN['id']);		$DB->query("SELECT sym.*, l.*                    FROM `dl_symlinks` sym                    LEFT JOIN `dl_links` l ON (l.did=sym.sym_did)                    WHERE sym.sym_id='{$symid}'");		$myrow2 = $DB->fetch_row();		$std->updateNavDL(" > " . GETLANG("editcomment"), $symid);		$DB->query("SELECT * FROM dl_comments WHERE `id`='{$id}'");		if (!$myrow = $DB->fetch_row()) {			$std->error(GETLANG("er_nocomment"));			return;		}		if (!$std->canModerate("edit_comments", $myrow2['sym_catid']) and			!$std->groupCanModerate(k_editComments, $myrow['uid'])) {			$std->error(GETLANG("er_noperms"));			return;		}		if (!empty($IN["add_comment"])) {			$update = array("name" => $IN["uc_name"],				//"email" => $IN["uc_email"],				"comments" => $IN["uc_message"]);			$result = $DB->update($update, "dl_comments", "id=$id");			$std->info(GETLANG("comment_edited") . "<br><a href='index.php?dlid=$symid'>" . GETLANG("continue") . "</a>");			$std->addAdminLog("Edited comment");			return;		}		$formPost = "index.php?ACT=editcomment&amp;id={$id}&amp;did={$symid}";		$username = "{$myrow['name']} <input name='uc_name' type='hidden' value='{$myrow['name']}'>";		$data = array("comment_post" => $formPost,			"username" => $username,			"message" => $myrow["comments"]);		$this->output .= $module->html_skincall("comment_form", $this->html, $data);		$OUTPUT->add_output($this->output);	}	function addComment($symid)	{		global $IN, $DB, $CONFIG, $std, $guser, $module;		$std->AssertUsingFullVersion();		$std->updateNavDL(" > " . GETLANG("addcomment"), $symid);		$result = $DB->query("SELECT l.*, sym.*					FROM dl_symlinks sym					LEFT JOIN dl_links l ON (l.did=sym.sym_did)					WHERE sym.sym_id=$symid");		if (!$myrow = $DB->fetch_row($result)) {			$std->error(GETLANG("er_nofile"));			return;		}		$dlid = $myrow['did'];		// If user has no browse permissions then skip this category		if (!$std->canAccess($myrow["sym_catid"], "canBrowse") || !$guser->getPermissions() & k_addComments) {			$std->error(GETLANG("er_noaccess"));			return;		}		if ($IN["uc_message"] != '') {			$time = date('Y-m-d H:i:s', time());			if ($guser->isGuest and $CONFIG['captcha_comment']) {				// Check valid catcha code				require_once ROOT_PATH . "/engine/captcha.php";				$captcha = new captcha();				if (!$captcha->checkValid($IN['captchaid'])) {					$std->error(GETLANG("er_dodgykeyentered"));					return;				}			}			if ($guser->getPermissions() & k_postHTML)				$message = $std->undoHTMLChars($IN["uc_message"]);			else				$message = $IN["uc_message"];			$insert = array("date" => $time,				"uid" => $guser->userid,				"name" => $IN["uc_name"],				"email" => $IN["uc_email"],				"comments" => $message,				"did" => "$dlid");			$result = $DB->insert($insert, "dl_comments");			$update = array("comments" => "comments+1");			$result = $DB->update($update, "dl_links", "did=$dlid");			$std->info(GETLANG("commentadded") . "<br>" . "<a href='index.php?dlid=$symid'>" . GETLANG("continue") . "</a>");			if ($CONFIG["email_comment"]) {				require_once(ROOT_PATH . "/engine/mime/htmlMimeMail.php");				$link = $rwdInfo->url . "/index.php?dlid=" . $symid;				$mail = new htmlMimeMail();				$text = str_replace("{username}", $guser->username, $CONFIG['email_comment_msg']);				$text = str_replace("{linkurl}", $link, $text);				$text = str_replace("{siteurl}", $rwdInfo->url, $text);				$text = str_replace("{comment}", $message, $text);				$mail->setText($text);				$mail->setReturnPath($CONFIG["email"]);				$from = "'{$CONFIG['email_sender']}' <" . $CONFIG["email"] . ">";				$mail->setFrom($from);				$mail->setSubject('New Comment Added');				$mail->setHeader('RW::Scripts', 'RW::Download');				$result = $mail->send(array($CONFIG["email"]), $CONFIG['mailtype']);			}		} else {			$data = array("comment_post" => "index.php?ACT=addcomment&amp;dlid={$symid}",				"message" => "");			if ($guser->isGuest and $CONFIG['captcha_comment']) {				$captcha = new captcha();				$id = $captcha->createImage();				$data['captcha'] = "index.php?ACT=regbotimg&amp;rc={$id}";				$data['captchaid'] = $id;			}			if ($guser->username) {				$username = "$guser->username <input name='uc_name' type='hidden' value='$guser->username'>				<input name='uc_email' type='hidden' value='" . $guser->userdetails[$guser->db_email] . "'>";				$data["username"] = $username;				$this->output .= $module->html_skincall("comment_form", $this->html, $data);			} else {				$username = "<input name='username' type='text' value='$guser->username'>";				$data["username"] = $username;				$this->output .= $module->html_skincall("comment_form", $this->html, $data);			}		}	}	function upload()	{		global $CONFIG, $IN, $OUTPUT, $DB, $rwdInfo, $std, $guser, $module;		require_once(ROOT_PATH . "/engine/upload.php");		$std->updateNav(" > " . GETLANG("nav_adddl"), 0);		if (!$std->canUploadFiles()) {			$std->error(GETLANG("er_noaccess"));			return;		}		if ($IN["confirm"]) {			$time = date('Y-m-d H:i:s', time());			if ($guser->getPermissions() & k_approveUL)				$approved = 0;			else				$approved = 1;			// Asign download to user			$owner = $guser->userid;			$upload = new CUpload();			$upload->moveFile($IN["maskName"], $IN["maskName"]);			$download = $IN["download"];			// Get rid of <br> tags from mirror list			$mirrors = eregi_replace('<br[[:space:]]*/?[[:space:]]*>', "\n", $IN["mirrorurls"]);			$mirrors = eregi_replace('&lt;br[[:space:]]*/?[[:space:]]*&gt;', "\n", $mirrors);			// Get rid of <br> tags from mirror list			$mirrornames = eregi_replace('<br[[:space:]]*/?[[:space:]]*>', "\n", $IN["mirrornames"]);			$mirrornames = eregi_replace('&lt;br[[:space:]]*/?[[:space:]]*&gt;', "\n", $mirrornames);			// Get rid of <br> tags from descriptions			$description = eregi_replace('&lt;br[[:space:]]*/?[[:space:]]*&gt;', "\n", $IN["description"]);			$adminreview = eregi_replace('&lt;br[[:space:]]*/?[[:space:]]*&gt;', "\n", $IN["adminreview"]);			if ($guser->getPermissions() & k_postHTML) {				$IN['description'] = $std->undoHTMLChars($IN['description']);				$IN['adminreview'] = $std->undoHTMLChars($IN['adminreview']);			}			if ($std->isExternalFile($download)) {				$realsize = $IN['sizenum'] * 1024;				$filesize = $std->my_filesize($IN['sizenum'] * 1024);			} else {				$filesize = $IN['filesize'];				$realsize = $IN['realsize'];			}			$insert = array("name" => $IN["name"],				"description" => $description,				"owner" => $owner,				"author" => $IN["author"],				"download" => $download,				"version" => $IN["version"],				"realsize" => $realsize,				"filesize" => $filesize,				"fileType" => $IN["fileType"],				"mirrors" => $mirrors,				"mirrornames" => $mirrornames,				"maskName" => $upload->masked_file,				"date" => $time,				"pinned" => $IN["pinned"],				"approved" => $approved);			$fvinsert = array(				"adminrating" => $IN["adminrating"],				"adminreview" => $adminreview);			if ($std->isUsingFullVersion()) {				$insert = array_merge($insert, $fvinsert);			}			$insert = $module->appendFilesDatabaseEntry($insert);			$DB->insert($insert, "dl_links");			$dlid = $DB->insert_id();			// Add sym links			for ($i = 0; $i < count($IN['categoryid']); $i++) {				$insert = array("sym_did" => $dlid,					"sym_catid" => $IN['categoryid'][$i]);				$DB->insert($insert, "dl_symlinks");				$symid = $DB->insert_id();			}			if ($std->isUsingFullVersion()) {				// Add custom data				// Query number of custom fields				$r1 = $DB->query("SELECT * FROM dl_custom");				if ($row1 = $DB->fetch_row($r1)) {					$insert = array("uid" => $dlid);					$DB->insert($insert, "dl_custom_data");					$update = array();					// For every custom field					do {						// Update with custom entry						$id = intval($row1["cid"]);						$index = "custom{$id}";						$update[$index] = $IN[$index];					} while ($row1 = $DB->fetch_row($r1));					$DB->update($update, "dl_custom_data", "`uid`='{$dlid}'");				}			}			$link = $rwdInfo->url . "/index.php?dlid=" . $symid;			if ($approved) {				if ($CONFIG["email_files"] and $std->isUsingFullVersion()) {					require_once(ROOT_PATH . "/engine/mime/htmlMimeMail.php");					$mail = new htmlMimeMail();					$text = str_replace("{username}", $guser->username, $CONFIG['email_newfile_msg']);					$text = str_replace("{filename}", $IN['name'], $text);					$text = str_replace("{linkurl}", $link, $text);					$text = str_replace("{siteurl}", $rwdInfo->url, $text);					$mail->setText($text);					$mail->setReturnPath($CONFIG["email"]);					($guser->userdetails[$guser->db_email]) ? $email = $guser->userdetails[$guser->db_email] : $email = "";					$from = "'{$CONFIG['email_sender']}' <{$email}>";					$mail->setFrom($from);					$mail->setSubject('A new file was added to the database');					$mail->setHeader('RW::Scripts', 'RW::Download');					$result = $mail->send(array($CONFIG["email"]), $CONFIG['mailtype']);				}				$std->info(GETLANG("dladded") . ". " . GETLANG("dlindb") . ".<br>" . "<a href='index.php?dlid={$symid}'>" . GETLANG("continue") . "</a>");				for ($i = 0; $i < count($IN['categoryid']); $i++)					$this->incrementCounter($IN['categoryid'][$i], $dlid, $IN["name"], $guser->userid);			} else {				if (($CONFIG["email_unapp"] || $CONFIG["email_files"]) and $std->isUsingFullVersion()) {					require_once(ROOT_PATH . "/engine/mime/htmlMimeMail.php");					$mail = new htmlMimeMail();					$text = str_replace("{username}", $guser->username, $CONFIG['email_unappfile_msg']);					$text = str_replace("{filename}", $IN['name'], $text);					$text = str_replace("{linkurl}", $link, $text);					$text = str_replace("{siteurl}", $rwdInfo->url, $text);					$mail->setText($text);					$mail->setReturnPath($CONFIG["email"]);					($guser->userdetails[$guser->db_email]) ? $email = $guser->userdetails[$guser->db_email] : $email = "";					$from = "'{$CONFIG['email_sender']}' <{$email}>";					$mail->setFrom($from);					$mail->setSubject('A file is waiting your approval');					$mail->setHeader('RW::Scripts', 'RW::Download');					$result = $mail->send(array($CONFIG["email"]), $CONFIG['mailtype']);				}				$std->info(GETLANG("dladded") . ". " . GETLANG("dlapp") . ".<br>" . "<a href='index.php?ACT=useradddl'>" . GETLANG("continue") . "</a>");			}			for ($i = 0; $i < $IN["thumbCount"]; $i++) {				$realName = "name" . $i;				$imgSize = "imageSize" . $i;				$type = "type" . $i;				$upload_limit = $CONFIG["uploadlimit"];				$upload = new CUpload();				$upload->moveImage($IN["$realName"], $IN["$realName"]);				$insertimg = array("realName" => $upload->masked_file,					"dlid" => $dlid,					"size" => $IN[$imgSize],					"type" => $IN[$type]);				$DB->insert($insertimg, "dl_images");			}			$OUTPUT->add_output($this->output);			return;		}		if ($IN["preview"]) {			if ($guser->isGuest and $CONFIG['captcha_upload']) {				// Check valid catcha code				require_once ROOT_PATH . "/engine/captcha.php";				$captcha = new captcha();				if (!$captcha->checkValid($IN['captchaid'])) {					$std->error(GETLANG("er_dodgykeyentered"));					return;				}			}			if (empty($IN["categoryid"])) {				$std->error(GETLANG("er_basecat"));				return;			}			if ($IN["name"] == '') {				$error .= $IN["dlname"] ? "" : GETLANG("name") . "<br>";				$error .= $IN["dlcat"] ? "" : GETLANG("cat") . "<br>";				$std->warning(GETLANG("warn_missing") . GETLANG("warn_fields") . ":<br>" . $error);				return;			}			// Upload thumbnails			$thumbCount = 0;			for ($i = 0; $i < $IN["thumbs"]; $i++) {				$fieldName = "thumb" . $i;				$upload = new CUpload();				$upload->uploadImage($fieldName, $upload_limit);				if (!$upload->file_name)					continue;				$thumbCount++;				$dlThumbs[] = $upload;			}			if ($_FILES["download"]['name']) {				$newFile = new CUpload();				$newFile->uploadFile("download", $upload_limit);				if ($newFile->errorMsg) {					$std->error($newFile->errorMsg);					return;				}				$dlfile = $newFile->file_name;			} // Otherwise a url was provided			else {				$dlfile = $IN["downloadurl"];				$filesize = "unknown";			}			// Or was it?			if ($dlfile == "http://")				$dlfile = "";			// Hope so...			if ($dlfile) {				$newdata = $IN;				for ($i = 0; $i < $thumbCount; $i++) {					$fieldName = "name" . $i;					$newdata[$fieldName] = $dlThumbs[$i]->file_name;					$fieldName = "imageSize" . $i;					$newdata[$fieldName] = $dlThumbs[$i]->image_size;					$fieldName = "type" . $i;					$newdata[$fieldName] = $dlThumbs[$i]->file_type;				}				if ($guser->getPermissions() & k_postHTML) {					$newdata['description'] = $std->undoHTMLChars($newdata['description']);					$newdata['adminreview'] = $std->undoHTMLChars($newdata['adminreview']);				}				$newdata['description'] = $std->mynl2br($newdata['description']);				$newdata['adminreview'] = $std->mynl2br($newdata['adminreview']);				$newdata["thumbCount"] = $thumbCount;				$newdata["download"] = $dlfile;				$newdata["realsize"] = $newFile->real_size;				$newdata["filesize"] = $newFile->file_size;				$newdata["fileType"] = $newFile->file_type;				$newdata["maskName"] = $newFile->masked_file;				$newdata["downloads"] = 0;				$newdata["userrating"] = "n/a";				$formdata = $this->parseFormData($newdata);				$post = "index.php?ACT=useradddl";				$this->files_dlPreviewMain($formdata, $IN["id"], $post);				$OUTPUT->add_output($this->output);				return;			} else {				// You great lemon!				$std->error(GETLANG("er_nodl"));			}		}		if ($IN["updateform"]) {			$post = "<form method='post' enctype='multipart/form-data' action='index.php?ACT=useradddl'>";			foreach ($IN as $i => $j)				$IN[$i] = stripslashes($IN[$i]);			if ($guser->getPermissions() & k_postHTML) {				$IN['description'] = $std->undoHTMLChars($IN['description']);				$IN['adminreview'] = $std->undoHTMLChars($IN['adminreview']);			}			$this->files_dlMainForm(0, 0, $IN, 0, $post);			$OUTPUT->add_output($this->output);			return;		}		$post = "<form method=post enctype='multipart/form-data' action='index.php?ACT=useradddl'>";		$this->files_dlMainForm("", "", NULL, 0, $post);		$OUTPUT->add_output($this->output);	}	// Only to be used after new uploads	function incrementCounter($parent, $dlid, $name, $authorid)	{		global $DB, $std, $guser;		$std->resyncCats($parent);		if (!$guser->isGuest) {			$guser->updateMemberExtra("`{$guser->db_id}`='{$authorid}'", "`mid`='{$authorid}'");			$DB->query("UPDATE `dl_memberextra` SET `uploaded`=uploaded+1 WHERE `mid`={$authorid}");		}		return true;	}	function editdl()	{		global $IN, $DB, $OUTPUT, $rwdInfo, $guser, $std;		$symid = intval($IN['symid']);		$dlid = intval($IN['did']);		$result = $DB->query("SELECT l.*, sym.*							  FROM dl_symlinks sym							  LEFT JOIN dl_links l ON (l.did=sym.sym_did)							  WHERE sym.sym_did={$dlid}");		$myrow = $DB->fetch_row();		do {			$catlist[] = $myrow['sym_catid'];			if ($myrow['sym_id'] == $symid)				$newdata = $myrow;		} while ($myrow = $DB->fetch_row());		$newdata['catlist'] = $catlist;		$std->updateNavDL(" > " . GETLANG("nav_editdl"), $symid);		if (!$std->canEdit($myrow["owner"], $newdata['catlist'])) {			$std->error(GETLANG("er_noperms"));			return;		}		if ($IN["ACT"] == "deleteimg") {			$this->files_deleteimg();			return;		}		if ($IN["removefile"]) {			if ($IN["confirm"]) {				$table = "dl_links";				$sqlid = "did=" . $dlid;				$type = "maskName";				if ($this->removeFile($rwdInfo->path, $table, $sqlid, $dlid, $type))					$this->output .= GETLANG("filedl") . "<br><br>";				else					$this->output .= GETLANG("er_unlink") . "<br><br>";				$this->output .= "+ <a href='index.php?dlid={$symid}'>" . GETLANG("backto") . " " . $newdata['name'] . "</a><br>";				$this->output .= "+ <a href='index.php?ACT=editdl&amp;did={$dlid}&amp;symid={$symid}'>" . GETLANG("edit") . " " . $newdata['name'] . "</a><br>";				$std->addAdminLog("Removed file from download '{$newdata['name']}'");			} else if ($IN["cancel"]) {				$this->output .= GETLANG("delcancel") . "<br><br>";				$this->output .= "+ <a href='index.php?dlid={$symid}'>" . GETLANG("backto") . " " . $newdata['name'] . "</a><br>";				$this->output .= "+ <a href='index.php?ACT=editdl&amp;did={$dlid}&amp;symid={$symid}'>" . GETLANG("backto") . " " . GETLANG("nav_editdl") . " " . $newdata["name"] . "</a><br>";			} else {				$std->warning(GETLANG("warn_delfile") . "<p>"					. "<form method='post' action='index.php?ACT=editdl&amp;removefile=1'>"					. "<input type='hidden' name='did' value='{$dlid}'>"					. "<input type='hidden' name='symid' value='{$symid}'>"					. "<input type='Submit' name='confirm' value='" . GETLANG("yes") . "'> <input type='Submit' name='cancel' value='" . GETLANG("no") . "'> </form>");			}			$OUTPUT->add_output($this->output);			return;		}		if ($IN["confirm"]) {			if ($this->saveEdit($symid, $dlid)) {				//$this->output .= "+ <a href='index.php?ACT=editdl&amp;did={$dlid}&amp;symid={$symid}'>".GETLANG("backto")." ".GETLANG("nav_editdl")." ".$IN["name"]."</a><br>";				$this->output .= "+ <a href='index.php?dlid={$symid}'>" . GETLANG("backto") . " " . $IN["name"] . "</a><br>";			}			$std->addAdminLog("Edited file '{$IN['name']}'");			$OUTPUT->add_output($this->output);			return;		}		if ($IN["preview"] and !$IN["updateform"]) {			$IN = $std->my_stripslashes($IN);			// Get rid of <br> tags from descriptions			$description = eregi_replace('&lt;br[[:space:]]*/?[[:space:]]*&gt;', "\n", $IN["description"]);			$adminreview = eregi_replace('&lt;br[[:space:]]*/?[[:space:]]*&gt;', "\n", $IN["adminreview"]);			if ($guser->getPermissions() & k_postHTML) {				$IN['description'] = $std->undoHTMLChars($IN['description']);				$IN['adminreview'] = $std->undoHTMLChars($IN['adminreview']);			}			$IN['description'] = $std->mynl2br($IN['description']);			$IN['adminreview'] = $std->mynl2br($IN['adminreview']);			$this->output .= $this->previewEdit("index.php?ACT=editdl&amp;did={$dlid}&amp;symid={$symid}");			$OUTPUT->add_output($this->output);			return;		}		if ($IN["updateform"]) {			$this->output .= "<form method='post' enctype='multipart/form-data' action='index.php?ACT=editdl&amp;did={$dlid}&amp;symid={$symid}'>";			$IN = $std->my_stripslashes($IN);			if ($guser->getPermissions() & k_postHTML) {				$IN['description'] = $std->undoHTMLChars($IN['description']);				$IN['adminreview'] = $std->undoHTMLChars($IN['adminreview']);			}			$this->files_dlMainForm($dlid, $symid, $IN, 0);			$OUTPUT->add_output($this->output);			return;		}		// Else display the edit form		$formpost = "<form method='post' enctype='multipart/form-data' action='index.php?ACT=editdl&amp;did={$dlid}&amp;symid={$symid}'>";		$this->files_dlMainForm($dlid, $symid, $newdata, 0, $formpost);		$OUTPUT->add_output($this->output);	}	// ===========================================================	//  Remove gallery thumbnail	//    Calls remove function in gallery class	// ===========================================================	function files_deleteimg()	{		global $IN, $sid;		require_once ROOT_PATH . "/functions/gallery.php";		$gallery = new gallery();		$symid = intval($IN['symid']);		$dlid = intval($IN['did']);		$imgid = intval($IN['imgid']);		$gallery->removeThumb("index.php?ACT=deleteimg&amp;imgid=$imgid&amp;did=$dlid&amp;symid=$symid", "index.php?dlid=$symid");	}	/*************************************************************************	 *    Delete Download	 *************************************************************************/	function deletedl()	{		global $IN, $DB, $OUTPUT, $std, $sid;		$symid = intval($IN['did']);		$DB->query("SELECT l.did, l.name, sym.*                    FROM dl_symlinks sym                    LEFT JOIN dl_links l  ON (l.did=sym.sym_did)                    WHERE sym.sym_id='{$symid}'");		$myrow = $DB->fetch_row();		$dlid = $myrow['did'];		$std->updateNavDL(" > " . GETLANG("nav_deletedl"), $symid);		if (!$std->canEdit($myrow["owner"], $myrow['sym_catid'])) {			$std->error(GETLANG("er_noperms"));			return;		}		$DB->query("SELECT `name` FROM `dl_categories` WHERE `cid`='{$myrow['sym_catid']}'");		$cat = $DB->fetch_row();		if ($IN["confirm"]) {			if ($this->deleteLink($dlid)) {				$this->output .= GETLANG("deldl") . "<br><br>";				$this->output .= "+ <a href='index.php'>" . GETLANG("backto") . " " . GETLANG("nav_home") . "</a><br>";				$this->output .= "+ <a href='index.php?cid={$myrow['sym_catid']}'>" . GETLANG("backto") . " " . $cat["name"] . "</a><br>";			} else				$std->error(GETLANG("er_couldnotremove"));		} else if ($IN["cancel"]) {			$this->output .= GETLANG("delcancel") . "<br><br>";			$this->output .= "+ <a href='index.php?dlid={$symid}'>" . GETLANG("backto") . $myrow["name"] . "</a><br>";			$this->output .= "+ <a href='index.php?cid={$myrow['sym_catid']}'>" . GETLANG("backto") . $cat["name"] . "</a><br>";			$this->output .= "+ <a href='index.php?ACT=editdl&amp;did={$dlid}&amp;symid={$symid}'>" . GETLANG("backto") . " " . GETLANG("nav_editdl") . " " . $myrow["name"] . "</a><br>";		} else {			$std->warning(GETLANG("warn_dldel") . "<p>"				. "<form method='post' action='index.php?ACT=deletedl'>"				. "<input type='hidden' name='did' value='{$symid}'>"				. "<input type='Submit' name='confirm' value='" . GETLANG("yes") . "'> <input type='Submit' name='cancel' value='" . GETLANG("no") . "'> </form>");		}		$OUTPUT->add_output($this->output);	}	function files_massmod()	{		global $std, $IN;		$std->updateNav(" > " . GETLANG("nav_massmoderate"), $IN['cid']);		$this->files_dobatch("index.php?ACT=massmod");	}	// ================================================================	// These functions are shared with admin_files.php and usercp.php	// ================================================================	// ===========================================================	//  Mass Move/Delete	//	Performs a batch operation on the selected files	// ===========================================================	function files_dobatch($post, $isAdmin = 0)	{		global $IN, $DB, $OUTPUT, $sid, $std;		$ids = count($IN["dlid"]);		if ($ids == 0) {			$std->error(GETLANG("er_noselect"));			return;		}		if ($IN["mode"] == "move") {			if ($IN["confirm"] and $IN["catid"]) {				$DB->query("SELECT sym_catid FROM dl_symlinks WHERE sym_id=" . $IN["dlid"]["0"]);				$row = $DB->fetch_row();				$oldcat = $row["sym_catid"];				$cid = $IN["catid"];				if ($oldcat == $cid) {					$std->error(GETLANG("er_samecat"));					return;				}				for ($i = 0; $i < $ids; $i++) {					$id = $IN["dlid"]["$i"];					$DB->query("UPDATE dl_symlinks SET sym_catid='$cid' WHERE sym_id=$id");				}				$std->resyncCats($cid);				$std->resyncCats($oldcat);				if (!$isAdmin)					$std->info(GETLANG("movedok") . "<p>" . "<a href='index.php?cid={$oldcat}'>" . GETLANG("continue") . "</a>");				else {					$this->output .= GETLANG("movedok") . "<p>";					$this->output .= "<a href='admin.php?sid=$sid&amp;area=files&amp;act=edit&amp;cid={$oldcat}'>" . GETLANG("continue") . "</a>";				}			} else {				$this->output .= sprintf(GETLANG("massmove"), $ids);				$this->output .= "<form method='post' action='$post'>";				for ($j = 0; $j < $ids; $j++)					$this->output .= "<input type='hidden' name='dlid[]' value='" . $IN["dlid"][$j] . "'>\n";				$this->output .= "<input type='hidden' name='mode' value='move'>";				if ($isAdmin) // variable passed in from function parameters					$this->output .= $std->catListBox(NULL, "catid", "canMove", 1);				else					$this->output .= $std->catListBox(NULL, "catid", "canMove");				$warntext .= "<input type='hidden' name='cid' value='{$IN['cid']}'>";				$this->output .= "<input type='submit' name='confirm' value='" . GETLANG("submit") . "'></form>";				if (!$isAdmin)					$OUTPUT->add_output($this->output);			}		} elseif ($IN["mode"] == "del") {			if ($IN["confirm"]) {				$oldcat = $IN["cid"];				for ($i = 0; $i < $ids; $i++) {					$id = $IN["dlid"]["$i"];					if (!$this->deleteLink2($id))						$std->error(GETLANG("er_stderrprefix"));				}				$std->resyncCats($oldcat);				$std->info(GETLANG("deldl") . "<p>" . "<a href='index.php?cid={$oldcat}'>" . GETLANG("continue") . "</a>");			} else if ($IN["cancel"]) {				$std->info(GETLANG("delcancel") . "<p>" . "<a href='index.php?cid={$oldcat}'>" . GETLANG("continue") . "</a>");			} else {				$warntext = "<p><form method='post' action='$post'>";				for ($j = 0; $j < $ids; $j++)					$warntext .= "<input type='hidden' name='dlid[]' value='{$IN['dlid'][$j]}'>";				$warntext .= "<input type='hidden' name='cid' value='{$IN['cid']}'>";				$warntext .= "<input type='hidden' name='mode' value='del'>";				$warntext .= "<input type='hidden' name='deleteChecked' value='1'>";				$warntext .= "<input type='Submit' name='confirm' value='" . GETLANG("yes") . "'> <input type='Submit' name='cancel' value='" . GETLANG("no") . "'> </form>";				$std->warning(GETLANG("warn_dldel") . $warntext);			}		} elseif ($IN["mode"] == "merge") {			if ($IN["confirm"]) {				/* CHECKPOINT				TODO								- Userrating (needs testing)				- Deleting of old files (needs testing)				*/				$filesprocessed = "0";				$downloads = "0";				$comments = "0";				$userrating = "0";				$votes = "0";				$views = "0";				$sdid = implode("','", $IN["dlid"]);				$sdid = "'" . $sdid . "'";				$files = $DB->query("					SELECT dl_links.*					FROM dl_symlinks					LEFT JOIN dl_links ON (dl_symlinks.sym_did = dl_links.did)					WHERE dl_symlinks.sym_id IN ($sdid)					ORDER BY dl_links.did ASC				");				// Go through files getting info				while ($file = $DB->fetch_row($files)) {					// If no file has been processed before (and we know that that means its the oldest file due to sort order in query):					if ($filesprocessed == "0") {						$oldid = $file["did"];					}					// Execute on all files					$filesprocessed = $filesprocessed + 1;					if (!isset($dids)) {						$dids = "'" . $file["did"] . "'";					} else {						$dids = $dids . ",'" . $file["did"] . "'";					}					$downloads = $downloads + $file["downloads"];					$comments = $comments + $file["comments"];					$views = $views + $file["views"];					// If file is newest					if ($DB->num_rows($files) == $filesprocessed) {						$newfile = $file;					} else {						// Else delete						$file2 = $CONFIG['filesfolder'] . "/" . $file["maskName"];						if (is_file($file2)) {							unlink($file2);						}					}				}				$totaluserrating = "0";				$votes = "0";				$result = $DB->query("SELECT * FROM dl_rating WHERE dlid IN (" . $dids . ")");				while ($vote = $DB->fetch_row($result)) {					$votes = $votes + 1;					$totaluserrating = $totaluserrating + $vote["rating"];				}				$userrating = round($totaluserrating / $votes, 0);				//$std->info ("Oldest: ".$oldid."<br>Newest: ".$newfile["did"]);				$update = array("name" => $newfile["name"],					"description" => $newfile["description"],					"owner" => $newfile['owner'],					"author" => $newfile['author'],					"download" => $newfile['download'],					"version" => $newfile['version'],					"filesize" => $newfile['filesize'],					"mirrors" => $newfile['mirrors'],					"mirrornames" => $newfile['mirrornames'],					"realsize" => $newfile['realsize'],					"maskName" => $newfile['maskName'],					"fileType" => $newfile['fileType'],					"downloads" => $downloads,					"approved" => $newfile['approved'],					"views" => $newfile['views'],					"votes" => $votes);				$fullverup = array("comments" => $newfile['comments'],					"adminrating" => $newfile['adminrating'],					"adminreview" => $newfile['adminreview'],					"userrating" => $userrating);				if ($std->isUsingFullVersion()) {					$update = array_merge($update, $fullverup);				}				$DB->update($update, "dl_links", "`did`='{$oldid}'");				$DB->query("UPDATE dl_images SET dlid = '" . $oldid . "' WHERE dlid IN (" . $dids . ")");				if ($std->isUsingFullVersion()) {					$DB->query("UPDATE dl_comments SET did = '" . $oldid . "' WHERE did IN (" . $dids . ")");					$DB->query("UPDATE dl_rating SET dlid = '" . $oldid . "' WHERE dlid IN (" . $dids . ")");				}				$DB->query("DELETE FROM dl_symlinks WHERE sym_did IN (" . $dids . ") AND sym_did != '" . $oldid . "'");				$DB->query("DELETE FROM dl_links WHERE did IN (" . $dids . ") AND did != '" . $oldid . "'");				$std->info(GETLANG("deldl") . "<p>" . "<a href='index.php?cid={$oldcat}'>" . GETLANG("continue") . "</a>");			} else if ($IN["cancel"]) {				$std->info(GETLANG("mergecancel") . "<p>" . "<a href='index.php?ACT=usercp&amp;area=home'>" . GETLANG("continue") . "</a>");			} else {				$warntext = "<p><form method='post' action='$post'>";				for ($j = 0; $j < $ids; $j++)					$warntext .= "<input type='hidden' name='dlid[]' value='" . $IN["dlid"][$j] . "'>";				$warntext .= "<input type='hidden' name='mergeChecked' value='1'>";				$warntext .= "<input type='hidden' name='cid' value='{$IN['cid']}'>";				$warntext .= "<input type='hidden' name='mode' value='merge'>";				$warntext .= "<input type='Submit' name='confirm' value='" . GETLANG("yes") . "'> <input type='Submit' name='cancel' value='" . GETLANG("no") . "'> </form>";				$std->warning(GETLANG("warn_dlautomerge") . $warntext);			}		} else {			$std->error(GETLANG("er_unknownop"));		}		//$OUTPUT->add_output($this->output);	}	// Called when edit dl is confirmed	function saveEdit($symid, $dlid)	{		global $DB, $IN, $guser, $std, $module;		if ($std->isUsingFullVersion()) {			$insert = array();			// Add custom field columns to array			$r1 = $DB->query("SELECT * FROM dl_custom");			if ($row1 = $DB->fetch_row($r1)) {				// For every custom field				do {					$id = $row1["cid"];					$index = "custom" . $id;					$data = $IN[$index];					$insert[$index] = $data;				} while ($row1 = $DB->fetch_row($r1));				// Add custom data				// Add id number reference first				$r1 = $DB->query("SELECT * FROM dl_custom_data WHERE uid='$dlid'");				if ($DB->num_rows($r1) == 0) {					$insert["uid"] = $dlid;					$DB->insert($insert, "dl_custom_data");				} else {					$DB->update($insert, "dl_custom_data", "uid='{$dlid}'");				}			}		}		$IN = $std->my_stripslashes($IN);		// Add any new images		for ($i = 0; $i < $IN["thumbCount"]; $i++) {			//$tempName = "thumb".$i;			$realName = "name" . $i;			$imgSize = "imageSize" . $i;			$type = "type" . $i;			$upload_limit = 0;			require_once ROOT_PATH . "/engine/upload.php";			$upload = new CUpload();			$upload->moveImage($IN["$realName"], $IN["$realName"]);			$insert = array("realName" => $IN[$realName],				"dlid" => $dlid,				"size" => $IN[$imgSize],				"type" => $IN[$type]);			$DB->insert($insert, "dl_images");		}		if ($IN["download"]) {			require_once ROOT_PATH . "/engine/upload.php";			$upload = new CUpload();			$upload->moveFile($IN["maskName"], $IN["maskName"]);			$update = array("download" => $IN["download"],				"maskName" => $upload->masked_file,				"realsize" => $IN["realsize"],				"filesize" => $IN["filesize"],				"fileType" => $IN["fileType"]);			$DB->update($update, "dl_links", "did=$dlid");		} else if ($IN["downloadurl"]) {			if ($IN["downloadurl"] == "http://")				$dlfile = "";			else				$dlfile = $IN["downloadurl"];			$update = array("download" => $dlfile,				"maskName" => $dlfile,				"realsize" => $IN["realsize"],				"filesize" => $IN["filesize"]);			$DB->update($update, "dl_links", "did=$dlid");		} else if ($IN['oldfile'] and $std->isExternalFile($IN['oldfile'])) {			// update filesize for external files only			$update = array("realsize" => $IN["realsize"],				"filesize" => $IN["filesize"]);			$DB->update($update, "dl_links", "did=$dlid");		}		$time = date('Y-m-d H:i:s', time());		$mirrors = eregi_replace('<br[[:space:]]*/?[[:space:]]*>', "\n", $IN["mirrors"]);		$mirrors = eregi_replace('&lt;br[[:space:]]*/?[[:space:]]*&gt;', "\n", $mirrors);		// Get rid of <br> tags from descriptions		$description = eregi_replace('&lt;br[[:space:]]*/?[[:space:]]*&gt;', "\n", $IN["description"]);		$adminreview = eregi_replace('&lt;br[[:space:]]*/?[[:space:]]*&gt;', "\n", $IN["adminreview"]);		if ($guser->getPermissions() & k_postHTML) {			$IN['description'] = $std->undoHTMLChars($IN['description']);			$IN['adminreview'] = $std->undoHTMLChars($IN['adminreview']);		}		$update = array("name" => $IN["name"],			"description" => $description,			"author" => $IN["author"],			"version" => $IN["version"],			"realsize" => $IN["realsize"],			"filesize" => $IN["filesize"],			"mirrors" => $mirrors,			"mirrornames" => $IN["mirrornames"],			"lastEdited" => $time,			"pinned" => $IN["pinned"]);		$upfull = array("adminrating" => $IN["adminrating"],			"adminreview" => $adminreview);		if ($std->isUsingFullVersion()) {			$update = array_merge($update, $upfull);		}		$update = $module->appendFilesDatabaseEntry($update);		$DB->update($update, "dl_links", "did=$dlid");		$foundarray = array();		for ($i = 0; $i < count($IN["categoryid"]); $i++) {			$foundarray[] = false;		}		$res = $DB->query("SELECT * FROM `dl_symlinks` WHERE `sym_did`='{$dlid}'");		while ($myrow = $DB->fetch_row($res)) {			$found = false;			for ($i = 0; $i < count($IN["categoryid"]); $i++) {				if ($IN["categoryid"][$i] == $myrow['sym_catid']) {					$found = true;					$foundarray[$i] = true;					break;				}			}			if (!$found) {				$DB->query("DELETE FROM `dl_symlinks` WHERE `sym_id`='{$myrow['sym_id']}'");			}			$std->resyncCats($myrow['sym_catid']);		}		for ($i = 0; $i < count($IN["categoryid"]); $i++) {			if (!$foundarray[$i]) {				$insert = array("sym_did" => $dlid,					"sym_catid" => $IN['categoryid'][$i]);				$DB->insert($insert, "dl_symlinks");				// Make sure that categories are synced				$std->resyncCats($IN["categoryid"][$i]);			}		}		return true;	}	// This function is called to display the post preview	function previewEdit($postlink)	{		global $IN, $OUTPUT, $std;		if (empty($IN["categoryid"])) {			$std->error(GETLANG("er_basecat"));			return false;		}		if ($IN["name"] == '') {			$error .= $IN["dlname"] ? "" : GETLANG("name") . "<br>";			$error .= $IN["dlcat"] ? "" : GETLANG("cat") . "<br>";			$std->warning(GETLANG("warn_missing") . GETLANG("warn_fields") . ":<br>" . $error);			return false;		}		// Upload thumbnails		$thumbCount = 0;		require_once(ROOT_PATH . "/engine/upload.php");		for ($i = 0; $i < $IN["thumbs"]; $i++) {			$fieldName = "thumb" . $i;			$upload = new CUpload();			$upload->uploadImage($fieldName, 0);			if (!$upload->file_name)				continue;			$thumbCount++;			$dlThumbs[] = $upload;		}		$newdata = $IN;		if ($_FILES["download"]['name']) {			$newFile = new CUpload();			$newFile->uploadFile("download", $upload_limit);			if (!$newFile->file_name)				$std->error($newFile->errorMsg);			$dlfile = $newFile->file_name;			$newdata["download"] = $dlfile;			$newdata["realsize"] = $newFile->real_size;			$newdata["filesize"] = $newFile->file_size;			$newdata["fileType"] = $newFile->file_type;			$newdata["maskName"] = $newFile->masked_file;		}		for ($i = 0; $i < $thumbCount; $i++) {			$fieldName = "name" . $i;			$newdata[$fieldName] = $dlThumbs[$i]->file_name;			$fieldName = "imageSize" . $i;			$newdata[$fieldName] = $dlThumbs[$i]->image_size;			$fieldName = "type" . $i;			$newdata[$fieldName] = $dlThumbs[$i]->file_type;		}		$newdata["thumbCount"] = $thumbCount;		$newdata["downloads"] = 0;		$newdata["userrating"] = "n/a";		if (($IN['oldfile'] and $std->isExternalFile($IN['oldfile'])) || ($IN['downloadurl'] != "" and $IN['downloadurl'] != "http://")) {			$newdata["realsize"] = $IN['sizenum'] * 1024;			$newdata["filesize"] = $std->my_filesize($IN['sizenum'] * 1024);		}		$formdata = $this->parseFormData($newdata);		$this->files_dlPreviewMain($formdata, $IN["id"], $postlink);		return true;	}	function files_dlMainForm($dlid, $symid, $data = array(), $isACP = 0, $formpost = "")	{		global $CONFIG, $DB, $IN, $OUTPUT, $rwdInfo, $std, $sid, $guser, $act, $module;		if ($std->isUsingFullVersion()) {			$thumbs = $IN["thumbs"];		} else {			$thumbs = 1;		}		require_once ROOT_PATH . "/functions/gallery.php";		$gallery = new gallery();		if ($data and $dlid)			$data['title'] = GETLANG("nav_editdl");		else			$data['title'] = GETLANG("nav_adddl");		if ($data["did"]) {			$thumbtable = $gallery->thumbTable($dlid, $symid, $data["owner"], $isACP);			if ($thumbtable) {				$data['thumbtable'] = $thumbtable;			}		}		$data['formpost'] = $formpost;		if (!$data['author'])			$data['author'] = $guser->username;		$row = array();		for ($i = 0; $i < $thumbs; $i++) {			$row['thumbnum'] = "thumb" . $i;			$data['thumbrows'] .= $module->html_skincall("thumb_row", $this->html, $row);		}		if ($data["download"]) {			if ($std->isExternalFile($data["download"])) {				$dl_url = $data["download"];			} else {				$dsid = $DB->query("SELECT sID FROM dl_sessions WHERE id={$guser->userid}");				$dsrow = $DB->fetch_row($dsid);				if (!$dsrow) {					$dsrow['sID'] = $std->createSession();				}				$dl_url = "index.php?ACT=dl&amp;id={$dlid}&amp;symid={$symid}&amp;sess={$dsrow['sID']}";			}			$row['dlinfo'] = $data["download"] . " - " . $data["filesize"] . " " . GETLANG("with") . " " . $data["downloads"] . " " . GETLANG("downloads");			if ($IN["ACT"] == "usercp")				$row['dlinfo'] .= "  [ <a href='index.php?ACT=usercp&amp;area=editdl&amp;removefile=1&amp;did={$dlid}&amp;symid={$symid}'>" . GETLANG("delete") . "</a> ] [ <a href='$dl_url'>" . GETLANG("dlview") . "</a> ]";			else if ($IN["ACT"] == "editdl")				$row['dlinfo'] .= "  [ <a href='index.php?ACT=editdl&amp;removefile=1&amp;did={$dlid}&amp;symid={$symid}'>" . GETLANG("delete") . "</a> ] [ <a href='$dl_url'>" . GETLANG("dlview") . "</a> ]";			else				$row['dlinfo'] .= "  [ <a href='admin.php?sid=$sid&amp;area=files&amp;act=editdl&amp;removefile=1&amp;id={$symid}'>" . GETLANG("delete") . "</a> ] [ <a href='$dl_url'>" . GETLANG("dlview") . "</a> ]";			if ($data['fileType']) {				$DB->query("SELECT icon FROM dl_filetypes WHERE `mimetype`='{$data['fileType']}'");				$ft = $DB->fetch_row();				if ($ft["icon"])					$row['typeinfo'] = "<img src='" . $rwdInfo->url . "/skins/skin" . $CONFIG["defaultSkin"] . "/mime_types/" . $ft["icon"] . "' border='0' alt='{$data['fileType']}'> " . $data['fileType'];				else					$row['typeinfo'] = $data['fileType'];			} else				$row['typeinfo'] = GETLANG("unknowntype");			$data['downloadrows'] .= $module->html_skincall("download_link", $this->html, $row);		} else {			$data['downloadrows'] .= $module->html_skincall("empty_download", $this->html);		}		if ($std->isUsingFullVersion() and $CONFIG['doCustomFields']) {			$result = $DB->query("SELECT * FROM dl_custom WHERE admins=0");			if ($myrow = $DB->fetch_row($result)) {				do {					$data['customRows'] .= $this->displayCustomRows($myrow, $dlid);				} while ($myrow = $DB->fetch_row($result));			}		}		$boxName = "categoryid[]";		if ($isACP)			$data['catlistbox'] = $std->catListBox($data["catlist"], $boxName, "canUL", 1, "multi");		else			$data['catlistbox'] = $std->catListBox($data["catlist"], $boxName, "canUL", 0, "multi");		if (!empty($data['catlist'])) {			foreach ($data['catlist'] as $cat)				$data['oldcategory'] .= "<input type='hidden' name='oldcats[]' value='{$cat}'>\n";		}		if ($guser->isAdmin) {			$addata['pinned'] = $data['pinned'];			if ($std->isUsingFullVersion()) {				$addata['adrating'] = "<select name='adminrating'>";				for ($x = 0; $x <= 10; $x++) {					$addata['adrating'] .= "<option value=$x ";					if ($x == $data["adminrating"])						$addata['adrating'] .= " selected";					if ($x == 0)						$addata['adrating'] .= ">" . GETLANG("notrated") . "</option>\n";					else						$addata['adrating'] .= ">$x</option>\n";				}				$addata['adrating'] .= "</select>";				$addata['adminreview'] = $std->br2nl($data["adminreview"]);				if ($CONFIG['doCustomFields']) {					$result = $DB->query("SELECT * FROM dl_custom WHERE admins=1");					if ($myrow = $DB->fetch_row($result)) {						do {							$addata['customRows'] .= $this->displayCustomRows($myrow, $dlid);						} while ($myrow = $DB->fetch_row($result));					}				}			}			$data['adminrows'] = $module->html_skincall("admin_rows", $this->html, $addata);		}		$data['description'] = $std->br2nl($data['description']);		$data['id'] = $dlid;		$data['thumbs'] = $thumbs;		$data['sizenum'] = round($data['realsize'] / 1024);		if ($std->isUsingFullVersion()) {			$data['usingFullVersion'] = true;		} else {			$data['usingFullVersion'] = false;		}		if ($guser->isGuest and $CONFIG['captcha_upload']) {			require_once ROOT_PATH . "/engine/captcha.php";			$captcha = new captcha();			$id = $captcha->createImage();			$data['captcha'] = "index.php?ACT=regbotimg&amp;rc={$id}";			$data['captchaid'] = $id;		}		$data = $module->files_dlMainForm($data);		if ($IN['ACT'] == "usercp")			return $this->ucphtml->ucp_editdl($data);		else			$this->output .= $module->html_skincall("add_file", $this->html, $data);	}	function files_dlPreviewMain($formdata = array(), $id, $post)	{		global $CONFIG, $std, $sid, $DB, $module;		if ($formdata["thumbCount"])			$std->info($formdata["thumbCount"] . " " . GETLANG("thumbs_added"));		if ($std->isUsingFullVersion()) {			// Attempt to get custom download field data			$customFields = array();			if ($CONFIG['doCustomFields']) {				$DB->query("SELECT * FROM dl_custom");				while ($cfrow = $DB->fetch_row()) {					$index = "custom_" . $cfrow['cid'];					$customFields[$index] = $cfrow;				}			}		}		$data = $this->parse_file_data($formdata, $customFields, 1);		$data["comments"] = "";		$data = $std->my_stripslashes($data);		$this->output .= $module->html_skincall("file_view", $this->html, $data);		$this->output .= "<form method=post enctype='multipart/form-data' action='$post'>";		if ($id)			$this->output .= "<input type='hidden' name='id' value='$id'>";		$this->output .= "<div align='center' style='text-align:center'>";		foreach ($formdata as $l => $v) {			if ($l == "categoryid" || $l == "oldcats") {				foreach ($v as $v1) {					$this->output .= "<input type='hidden' name='{$l}[]' value='$v1'>\n";				}			} else				$this->output .= "<input type='hidden' name='$l' value='$v'>\n";		}		$this->output .= "<input type='submit' name='confirm' value='" . GETLANG("confirm") . "'>";		$this->output .= "</div></form>";	}	// Replace empty fields with text where necessary	function parseFormData($data)	{		global $DB, $std;		if ($data["author"] == '')			$author = GETLANG("unknown");		else			$author = $data["author"];		if ($std->isUsingFullVersion()) {			($data["adminrating"]) ? $adminrating = $data["adminrating"] : $adminrating = 0;		}		$formdata = $data;		unset($formdata["preview"]);		$formdata['name'] = stripslashes($data['name']);		if ($std->isUsingFullVersion()) {			$formdata["adminrating"] = $adminrating;		}		$formdata["author"] = $author;		if ($std->isUsingFullVersion()) {			$result = $DB->query("SELECT * FROM dl_custom");			if ($myrow = $DB->fetch_row($result)) {				do {					$index = "custom" . $myrow["cid"];					$formdata[$index] = stripslashes($data[$index]);				} while ($myrow = $DB->fetch_row($result));			}		}		return $formdata;	}	function displayCustomRows($myrow, $id)	{		global $DB, $OUTPUT, $std, $module;		$std->AssertUsingFullVersion();		if ($id) {			$r2 = $DB->query("SELECT * FROM dl_custom_data WHERE uid=$id");			$row2 = $DB->fetch_row($r2);		}		$index = "custom" . $myrow["cid"];		if ($myrow["field"] == "text") {			$data['caption'] = $myrow["caption"] . ":";			if ($myrow["description"])				$data['caption'] .= "<br>" . $myrow["description"];			$data['customdata'] = "<input name='" . $index . "' type='text'";			if ($myrow["size"])				$data['customdata'] .= " size='" . $myrow["size"] . "'";			if ($myrow["max"])				$data['customdata'] .= " maxlength='" . $myrow["max"] . "'";			$data['customdata'] .= " value='" . $row2[$index] . "'>";		} else if ($myrow["field"] == "menu") {			$data['caption'] = $myrow["caption"] . ":";			if ($myrow["description"])				$data['caption'] .= "<br>" . $myrow["description"];			$data['customdata'] = "<select name='custom" . $myrow["cid"] . "'>";			$listrows = explode("\n", $myrow["options"]);			foreach ($listrows as $l) {				$items = explode("=", $l);				{					$data['customdata'] .= "<option value='" . $items[0] . "'";					if ($items[0] == $row2[$index])						$data['customdata'] .= " selected";					$data['customdata'] .= ">" . $items[1] . "</option>";				}			}			$data['customdata'] .= "</select>";		}		return $module->html_skincall("custom_row", $this->html, $data);	}	/*************************************************************************	 *    Remove a file from a download but not delete from database	 *************************************************************************/	function removeFile($path, $table, $sqlid, $id, $type)	{		global $CONFIG, $sid, $std, $DB;		$result2 = $DB->query("SELECT * FROM $table WHERE $sqlid");		$myrow2 = $DB->fetch_row($result2);		if ($std->isExternalFile($myrow2[$type])) {			if ($table == "dl_links") {				$update = array($type => '',					"download" => '',					"filesize" => 0,					"realsize" => 0,					"fileType" => '');				$DB->update($update, $table, $sqlid);			} else {				$update = array($type => '');				$DB->update($update, $table, $sqlid);			}			return true;		} else {			$file = $CONFIG['filesfolder'] . "/" . $myrow2[$type];			if ($table == "dl_links")				$update = array($type => '',					"download" => '',					"filesize" => 0,					"realsize" => 0,					"fileType" => '');			else				$update = array($type => '');			$DB->update($update, $table, $sqlid);			if (is_file($file)) {				unlink($file);				return true;			} else				return false;		}	}	// ===========================================================	//  Delete Link	//	Removes file from database ensuring all related files	//	Are removed with it	// ===========================================================	function deleteLink($id)	{		global $DB, $CONFIG, $rwdInfo, $std;		// Remove links from category		$DB->query("SELECT sym.*, l.*							   FROM dl_symlinks sym							   LEFT JOIN dl_links l ON (l.did=sym.sym_did)							   WHERE sym.sym_did=$id");		$myrow = $DB->fetch_row();		$catlist[] = $myrow['sym_catid'];		while ($myrow2 = $DB->fetch_row())			$catlist[] = $myrow2['sym_catid'];		require_once ROOT_PATH . "/functions/gallery.php";		$gallery = new gallery();		$gallery->remove_thumbs($myrow["did"]);		$file2 = $CONFIG['filesfolder'] . "/" . $myrow["maskName"];		$DB->query("DELETE FROM dl_links WHERE did=$id");		$DB->query("DELETE FROM dl_symlinks WHERE sym_did=$id");		if ($std->isUsingFullVersion()) {			$DB->query("DELETE FROM dl_comments WHERE did=$id");			$DB->query("DELETE FROM dl_custom_data WHERE uid=$id");		}		foreach ($catlist as $c) {			$std->resyncCats($c);		}		$parent = $dlcat;		if (is_file($file2))			unlink($file2);		$std->addAdminLog("Deleted file from database");		return true;	}	// Same as above but takes sym_id instead of download id	function deleteLink2($id)	{		global $DB, $CONFIG, $rwdInfo, $std;		// Remove links from category		$DB->query("SELECT sym.*, l.*                               FROM `dl_symlinks` sym                               LEFT JOIN `dl_links` l ON (l.did=sym.sym_did)                               WHERE sym.sym_id='{$id}'");		$myrow = $DB->fetch_row();		require_once ROOT_PATH . "/functions/gallery.php";		$gallery = new gallery();		$gallery->remove_thumbs($myrow["did"]);		$file2 = $CONFIG['filesfolder'] . "/" . $myrow["maskName"];		$dlid = $myrow["did"];		$DB->query("SELECT sym_catid FROM dl_symlinks WHERE sym_did=$dlid");		while ($myrow2 = $DB->fetch_row())			$catlist[] = $myrow2['sym_catid'];		$DB->query("DELETE FROM dl_links WHERE did=$dlid");		$DB->query("DELETE FROM dl_symlinks WHERE sym_did=$dlid");		if ($std->isUsingFullVersion()) {			$DB->query("DELETE FROM dl_comments WHERE did=$dlid");			$DB->query("DELETE FROM dl_custom_data WHERE uid=$id");		}		foreach ($catlist as $c) {			$std->resyncCats($c);		}		$parent = $dlcat;		if (is_file($file2))			unlink($file2);		return true;	}	function order_box($catID, $sortvalue, $order)	{		// Change default sort order of links		$order_box = "<form method='post' enctype='multipart/form-data' action='index.php?cid=$catID'>";		$order_box .= "<table border='0' cellspacing='2' cellpadding='2'><tr><td align='right'>";		$selectdate = $selectauthor = $selectname = $selectdownloads = "";		if ($sortvalue == "date")			$selectdate = "selected";		else if ($sortvalue == "author")			$selectauthor = "selected";		else if ($sortvalue == "name")			$selectname = "selected";		else if ($sortvalue == "downloads")			$selectdownloads = "selected";		$order_box .= GETLANG("sortdls") . ":</td><td>";		$order_box .= "<select name=sortvalue>		    <option value='date' $selectdate>" . GETLANG("dateSub") . "</option>		    <option value='author' $selectauthor>" . GETLANG("author") . "</option>		    <option value='name' $selectname>" . GETLANG("name") . "</option>		    <option value='downloads' $selectdownloads>" . GETLANG("nodl") . "</option>	      </select>	    </td><td align=right>";		if ($order == "ASC")			$selectasc = "selected";		else			$selectdesc = "selected";		$order_box .= GETLANG("order") . ": </td><td>";		$order_box .= "<select name=order>		    <option value='ASC' $selectasc>" . GETLANG("asc") . "</option>		    <option value='DESC' $selectdesc>" . GETLANG("desc") . "</option>	      </select></td><td align=right>";		$order_box .= "<input name=sort type=submit value=" . GETLANG("submit") . "></td></tr></table></form>";		return $order_box;	}	function parse_file_data($myrow, $custom = array(), $isPreview = 0, $isACP = 0, $domod = 0, $isFullList = 1)	{		global $CONFIG, $OUTPUT, $DB, $IN, $rwdInfo, $std, $sid, $guser, $module;		require_once ROOT_PATH . "/functions/gallery.php";		$gallery = new gallery();		$dlid = $myrow["did"];		$symid = $myrow['sym_id'];		$imageblock = "";		// Thumbnail block		if (!$isFullList) {			$thumb = $gallery->thumbTable($dlid, $symid, $myrow["owner"]);			if ($thumb) {				$data = array("thumb" => $thumb);				$imageblock .= $module->html_skincall("image_block", $this->html, $data);			}		}		$onethumb = $gallery->getFirstThumb($myrow);		//		// Description Block		$descblock = "";		{			if ($myrow["description"]) {				$data = array("description" => $std->mynl2br($myrow["description"]));				$descblock = $module->html_skincall("desc_block", $this->html, $data);			}		}		//		// Admin Review Block		$reviewblock = "";		if ($myrow["adminreview"]) {			$data = array("adminreview" => $std->mynl2br($myrow["adminreview"]));			$reviewblock = $module->html_skincall("adreview_block", $this->html, $data);		}		$dl_size = "";		$ext = $std->GetFileExtention($myrow["maskName"]);		if (!$isPreview and ($ext == '.jpg' || $ext == '.jpeg' || $ext == '.gif' || $ext == '.bmp')) {			if (file_exists($CONFIG['filesfolder'] . "/" . $myrow["maskName"])) {				$size = getimagesize($CONFIG['filesfolder'] . "/" . $myrow["maskName"]);				$dl_size = GETLANG("imgdim") . ": " . $size[0] . "x" . $size[1];			}		}		$rate_post = "";		if (!$isPreview) {			// Form post for rate this file			$rate_post = "index.php?ACT=ratefile&amp;dlid={$symid}";		}		if ($std->isUsingFullVersion()) {			if ($myrow["userrating"])				$userrating = $myrow["userrating"];			else				$userrating = "n/a";		}		$urls = explode("\n", $myrow["mirrors"]);		$names = explode("\n", $myrow["mirrornames"]);		$mirrorlist = "";		for ($i = 0; $i < count($urls); $i++) {			if (!trim($urls[$i]))				continue;			if (!$names[$i]) {				$url = parse_url($urls[$i]);				$names[$i] = $url['host'];			}			$mirror['mirror'] = "<a href='{$urls[$i]}'>{$names[$i]}</a>";			$mirrorlist .= $module->html_skincall("mirrorrow", $this->html, $mirror);		}		$addcomment = "";		if (!$isPreview and $guser->getPermissions() & k_addComments and $std->isUsingFullVersion()) {			$addcomment = "<a href='index.php?dlid={$symid}&amp;addcomment=1'>" . GETLANG("addcomment") . "</a>";		}		if ($std->isUsingFullVersion()) {			if ($myrow['adminrating'] == 0)				$adminrating = "n/a";			else				$adminrating = $myrow["adminrating"];			if ($myrow['adminreview'])				$adminreview = GETLANG("adReview") . ": $adminreview";		}		if ($std->isRecent($myrow["date"]))			$new = "NEW";		else			$new = "";		if ($std->isRecent($myrow["lastEdited"]))			$updated = "UPDATED";		else			$updated = "";		$pinned = "";		if ($myrow["pinned"])			$pinned = GETLANG("pinned");		$download_link = $updateddate = $date = "";		if (!$isPreview) {			$date = $std->convertDate($myrow["date"]);			$updateddate = $std->convertDate($myrow["lastEdited"]);		}		$report_link = $email_link = $edit_link = $del_link = "";		if (!$isPreview) {			if (!$isACP and $std->isUsingFullVersion()) {				$report_link = "<a href='index.php?blid={$symid}&amp;ACT=report'>" . GETLANG("report") . "</a>";				if ($CONFIG["email_a_friend"])					$email_link = "<a href='index.php?dlid={$symid}&amp;ACT=email'>" . GETLANG("emailfriend") . "</a>";			}			if ($myrow["download"])				$download_link = "index.php?ACT=dl&amp;id=$dlid&amp;symid={$symid}";			if ($guser->getPermissions() & k_useSessionIDs)				$download_link .= "&amp;sess={$IN['sid']}";			if ($std->canModerate("canedit", $myrow["sym_catid"]) and !$isACP and $std->isUsingFullVersion())				$edit_link = "<a href='index.php?ACT=editdl&amp;did={$dlid}&amp;symid={$symid}'>" . GETLANG("edit") . "</a>";			if ($std->canModerate("candelete", $myrow["sym_catid"]) and !$isACP and $std->isUsingFullVersion())				$del_link = "<a href='index.php?ACT=deletedl&amp;did={$symid}'>" . GETLANG("delete") . "</a>";			if ($guser->isAdmin and $isACP) {				$del_link = "<a href='admin.php?sid=$sid&amp;area=files&amp;act=deletedl&amp;id={$symid}'>" . GETLANG("delete") . "</a>";				$edit_link = "<a href='admin.php?sid=$sid&amp;area=files&amp;act=editdl&amp;id={$dlid}&amp;id={$symid}'>" . GETLANG("edit") . "</a>";			}		}		if ($guser->isAdmin and $isACP)			$name = "<a href='admin.php?sid=$sid&amp;area=files&amp;act=editdl&amp;id={$symid}'>" . $myrow["name"] . "</a>";		else			$name = "<a href='index.php?dlid={$symid}'>" . $myrow["name"] . "</a>";		$file_icon = "";		if ($myrow["icon"])			$file_icon = "<img src='" . $rwdInfo->url . "/skins/skin" . $CONFIG["defaultSkin"] . "/mime_types/" . $myrow["icon"] . "' border='0' alt='{$data['fileType']}'>";		if ($domod)			$editvalue = $symid;		else			$editvalue = "";		if ($std->isExternalFile($myrow["download"]))			$target = "_blank";		else			$target = "_self";		if ($std->isUsingFullVersion())			$num_comments = $myrow['comments'];		$data = array("name" => "$name",			"new" => "$new",			"updated" => "$updated",			"pinned" => $pinned,			"image_block" => "$imageblock",			"onethumb" => "$onethumb",			"date" => "$date",			"updated_date" => "$updateddate",			"views" => $myrow["views"] + 1,			"version" => $myrow["version"],			"filesize" => $myrow["filesize"],			"image_size" => "$dl_size",			"author" => $myrow["author"],			"downloads" => $myrow["downloads"],			"adminrating" => $adminrating,			"userrating" => $userrating,			"votes" => $myrow['votes'],			"mirrors" => "$mirrorlist",			"description_block" => $descblock,			"adminreview_block" => $reviewblock,			"description" => $std->mynl2br($myrow["description"]),			"short_desc" => $std->shorten_string($myrow['description']),			"add_rate" => "$rate_post",			"report_link" => "$report_link",			"email_link" => "$email_link",			"addcomment" => "$addcomment",			"edit" => $edit_link,			"editvalue" => $editvalue,			"delete" => $del_link,			"num_comments" => $num_comments,			"isFullVersion" => $std->isUsingFullVersion());		if ($download_link) {			$dldata = array('target' => $target,				'file_icon' => $file_icon,				'download_url' => $download_link);			$data['download_link'] = $module->html_skincall("file_view_download", $this->html, $dldata);		}		if ($std->isUsingFullVersion()) {			if (!empty($custom)) {				foreach ($custom as $i => $j) {					$data[$i . "_caption"] = $j['caption'];					$data[$i . "_desc"] = $j['desc'];					$data[$i . "_data"] = $myrow["custom" . $j['cid']];				}			}		}		$data = $module->parse_file_data($myrow, $data, $isFullList);		return $data;	}	function modoptions($cid)	{		global $guser, $std;		$options = 0;		$output = "<select name='mode'>";		if ($std->canModerate("candelete", $cid)) {			$output .= "<option value='del'>" . GETLANG("delselect") . "</option>";			$options++;		}		if ($std->canModerate("canmove", $cid)) {			$output .= "<option value='move'>" . GETLANG("moveselect") . "</option>";			$options++;		}		$output .= "</select>";		$output .= "<input type='submit' value='" . GETLANG("inf_go") . "' name='domod'>";		$output .= "<input type='hidden' value='$cid' name='cid'>";		if ($options)			return $output;		else			return "";	}}?>