<?php/* * Copyright (c) 2023. * RW::Software * Dave Conley * https://www.rwscripts.com/ */require_once ROOT_PATH . "/functions/rwd_functions.php";// NOTE TO SELF: When changing the version number dont forget to change the// install and upgrade script versions$version = "v4.1.2";$version_short = "4.1";$updateversion = "4|1|2|0";$buildnum = 0;class rwdcryptfunc extends rwdfunc{	function rwdcryptfunc()	{		global $buildnum;		$filename = ROOT_PATH . "/build.txt";		if (file_exists($filename)) {			$h = fopen($filename, "r");			$buildnum = fread($h, filesize($filename));		}	}	function isUsingFullVersion()	{		return true; // return true here to force always full version		global $std;		if (ENCODED and sg_get_const("fullversion") == "true")			return true;		else if (!ENCODED)			return true;		//return false;     // Change to this to test lite version		else			return false;	}	function AssertUsingFullVersion()	{		if (!$this->isUsingFullVersion()) {			echo "Sorry but you have tried to perform an action that is not permitted in the free version of our software. Please consider upgrading your licence at www.rwscripts.com";			exit();		}	}	function showLicenceInformation()	{		global $CONFIG, $std, $version, $updateversion;		$out = "<pre>";		$out .= "Licence id:               {$CONFIG['licenceid']}<br>";		$out .= "Last Check:               " . $std->formatDate($CONFIG['lastcheck']) . "<br>";		if (ENCODED) {			$isfull = ($this->isUsingFullVersion()) ? "yes" : "no";			$out .= "Running full version:     {$isfull}<br>";			$out .= "<br>Encoded by:               " . sg_get_const("encoder");			$out .= "<br>Encoder version:          " . sg_get_const("version");			$out .= "<br>Encoded date:             " . sg_get_const("encode_date");			$out .= "<br>Licence created:          " . $std->formatDate(sg_get_const("license_date"));			if (sg_get_const("expire_date"))				$expires = $std->formatDate(sg_get_const("expire_date"));			else				$expires = "Never";			$out .= "<br>Licence expires:          " . $expires;		}		$out .= "<br>Software version:         {$version}<br>";		$out .= "Update version id:        {$updateversion}<br>";		$out .= "Using user DB:            {$CONFIG['usertype']}<br>";		$out .= "</pre>";		return $out;	}	function createSession()	{		global $DB, $IN, $std, $guser;		$identifier = $guser->userid;		// Guests all have the same IP so this is the most unique data we have to create a session		if ($guser->isGuest)			$identifier = $IN['ipaddr'];		srand($std->make_seed());		$session = md5(time() + $identifier + rand());		// Update the user record		$time = time();		// Check if sid already present		if (!$guser->isGuest)			$sr = $DB->query("SELECT * FROM dl_sessions WHERE id = '$guser->userid'");		else			$sr = $DB->query("SELECT * FROM dl_sessions WHERE ip = '{$IN['ipaddr']}'");		// if rows returned then update		$dbentry = array("id" => $guser->userid,			"sID" => $session,			"sTime" => $time,			"ip" => $IN['ipaddr']);		if ($myrow = $DB->fetch_row($sr)) {			$session = $dbentry['sID'] = $myrow['sID'];			$DB->update($dbentry, "dl_sessions", "ref = {$myrow['ref']}");		} else    // else add new row			$DB->insert($dbentry, "dl_sessions");		return $session;	}	function checkLicenceValid()	{		global $std, $DB, $CONFIG;		$time = time();		if ($CONFIG['lastcheck'] > $time || ($time - $CONFIG['lastcheck']) > 604800) {			if ($this->isUsingFullVersion()) {				require ROOT_PATH . "/engine/communicate.php";				$comms = new communicate();				$postarray = array("licid" => $CONFIG['licenceid']);				$result = $comms->send_data("http://www.rwscripts.com/download/index.php?ACT=licence&area=checkValid", $postarray);				foreach ($comms->errors as $e) {					$std->error($e);				}				if ($result == "FAIL") {					$filename = './rwdownload.lic';					if (!$handle = fopen($filename, 'wb')) {						$std->error("Cannot open file ($filename)");						return;					}					if (fwrite($handle, "Licence cancelled. Please contact RW::Scripts if this is incorrect") === FALSE) {						$std->error("Cannot write to file ($filename)");						return;					}				} else {					$std->saveDBConfigKey("lastcheck", time());				}			} else {				$std->saveDBConfigKey("lastcheck", time());			}		}	}}?>