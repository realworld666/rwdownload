<?php/* * Copyright (c) 2023. * RW::Software * Dave Conley * https://www.rwscripts.com/ */// we will do our own error handling/*error_reporting(0);// user defined error handling functionfunction userErrorHandler($errno, $errmsg, $filename, $linenum, $vars){    // timestamp for the error entry    $dt = date("Y-m-d H:i:s (T)");    // define an assoc array of error string    // in reality the only entries we should    // consider are E_WARNING, E_NOTICE, E_USER_ERROR,    // E_USER_WARNING and E_USER_NOTICE    $errortype = array (                E_ERROR              => 'Error',                E_WARNING            => 'Warning',                E_PARSE              => 'Parsing Error',                E_NOTICE             => 'Notice',                E_CORE_ERROR         => 'Core Error',                E_CORE_WARNING       => 'Core Warning',                E_COMPILE_ERROR      => 'Compile Error',                E_COMPILE_WARNING    => 'Compile Warning',                E_USER_ERROR         => 'User Error',                E_USER_WARNING       => 'User Warning',                E_USER_NOTICE        => 'User Notice',                E_STRICT             => 'Runtime Notice',                E_RECOVERABLE_ERROR  => 'Catchable Fatal Error'                );    // set of errors for which a var trace will be saved    $user_errors = array(E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE);    $err = "<errorentry>\n";    $err .= "\t<datetime>" . $dt . "</datetime>\n";    $err .= "\t<errornum>" . $errno . "</errornum>\n";    $err .= "\t<errortype>" . $errortype[$errno] . "</errortype>\n";    $err .= "\t<errormsg>" . $errmsg . "</errormsg>\n";    $err .= "\t<scriptname>" . $filename . "</scriptname>\n";    $err .= "\t<scriptlinenum>" . $linenum . "</scriptlinenum>\n";    if (in_array($errno, $user_errors)) {        $err .= "\t<vartrace>" . wddx_serialize_value($vars, "Variables") . "</vartrace>\n";    }    $err .= "</errorentry>\n\n";    // for testing    // echo $err;    // save to the error log, and e-mail me if there is a critical user error    error_log($err, 3, "/usr/local/php4/error.log");    if ($errno == E_USER_ERROR)    {        echo $err;    }}$old_error_handler = set_error_handler("userErrorHandler");*/require_once("./functions/rwd_crypt_constants.php");// Create our superglobal wotsit so we can save doing the same things over and overclass wotsit{	var $path = "";	var $url = "";	var $skinurl = "";	var $skinpath = "";	var $cat_cache = array();	var $cats_saved = 0;	var $image_cache = array();	var $imgs_saved = 0;	var $user_cache = array();	var $error_log = "";	var $nav = "";	var $userbar = "";	var $pagetitle = "";	var $links = "";	var $lang = array();	var $loaded_templates = array();	var $skin_global;	var $skin_wrapper;	var $currentPageName = "";}$rwdInfo = new wotsit();// Load config$CONFIG = array();require_once(ROOT_PATH . "/globalvars.php");// If not installed yet then load the installer instead of doing this//if (!DEBUG and file_exists(dirname(__FILE__) . '/install.php') and !file_exists(dirname(__FILE__) . '/install.lock'))//	header('Location: http://' . (empty($_SERVER['HTTP_HOST']) ? $_SERVER['SERVER_NAME'] . (empty($_SERVER['SERVER_PORT']) || $_SERVER['SERVER_PORT'] == '80' ? '' : ':' . $_SERVER['SERVER_PORT']) : $_SERVER['HTTP_HOST']) . (strtr(dirname($_SERVER['PHP_SELF']), '\\', '/') == '/' ? '' : strtr(dirname($_SERVER['PHP_SELF']), '\\', '/')) . '/install.php');if (ENCODED) {	if (!is_writable(ROOT_PATH . "/rwdownload.lic")) {		echo "rwdownload.lic is not writable. Please change the permissions on rwdownload.lic to 666 or 777";		exit();	}}// Load required librariesrequire_once(ROOT_PATH . "/engine/lang.php");require_once(ROOT_PATH . "/functions/rwd_crypt_functions.php");require_once(ROOT_PATH . "/engine/mysql.php");require_once(ROOT_PATH . "/engine/output.php");require_once(ROOT_PATH . "/modules/module_plugs.php");require_once(ROOT_PATH . "/engine/modloader.php");require_once(ROOT_PATH . "/engine/taskmanager.php");require_once(ROOT_PATH . "/engine/mailmanager.php");// Global functions$std = new rwdcryptfunc();// Get data from global arrays$IN = $std->saveGlobals();// Language class$clang = new language();// Task Manager$taskmgr = new TaskManager();// Mail Manager$mailmgr = new mailmanager();// Load the database$dbinfo = array("sqlhost" => $CONFIG["sqlhost"],	"sqlusername" => $CONFIG["sqlusername"],	"sqlpassword" => $CONFIG["sqlpassword"],	"sqldatabase" => $CONFIG["sqldatabase"],	"sql_tbl_prefix" => $CONFIG["sqlprefix"]);$DB = new mysql($dbinfo);$std->loadNewStyleConfig();// Create helper globals$rwdInfo->path = $CONFIG["sitepath"];$rwdInfo->url = $CONFIG["siteurl"];$rwdInfo->skinurl = $CONFIG["siteurl"] . "/skins/skin" . $CONFIG["defaultSkin"];$rwdInfo->skinpath = ROOT_PATH . "/skins/skin" . $CONFIG["defaultSkin"];$rwdInfo->pagetitle = $CONFIG['isoffline'] ? $CONFIG['sitename'] . " [OFFLINE]" : $CONFIG['sitename'];// Our skin handler$OUTPUT = new CDisplay();$std->checkLicenceValid();// Load more librariesrequire_once(ROOT_PATH . "/engine/users.php");// Create the user array$guser = new user();$guser->initialise();if (!$guser->errormsg)	$guser->uservalidate();if (!$guser->isGuest and $guser->userdetails["skin"] and $guser->userdetails["skin"] != $CONFIG["defaultSkin"]) {	$rwdInfo->skinurl = $CONFIG["siteurl"] . "/skins/skin" . $guser->userdetails["skin"];	$rwdInfo->skinpath = ROOT_PATH . "/skins/skin" . $CONFIG["defaultSkin"];	$rwdInfo->skin_global = "";	$rwdInfo->loaded_templates = array();	// Reload our skin handler	$OUTPUT = new CDisplay();}// Global module class$modloader = new modloader();$module = new module_plugs();// Map Actions into files$action = array("idx" => "browse",	"useradddl" => "files",	"ratefile" => "files",	"addcomment" => "files",	"editcomment" => "files",	"deletecomment" => "files",	"deleteimg" => "files",	"report" => "files",	"email" => "files",	"massmod" => "files",	"register" => "register",	"regbotimg" => "captcha",	"login" => "login",	"dologin" => "login",	"logout" => "login",	"usercp" => "usercp",	"editdl" => "files",	"deletedl" => "files",	"search" => "search",	"dosearch" => "search",	"dl" => "download",	"browser" => "gallery",	"offline" => "browse",	"licence" => "licmgr",	"createplugin" => "pluginutils");$action = $module->assignLinkActions($action);if ($CONFIG['isoffline'] and !($guser->getPermissions() & k_viewOffline) and	$action[$IN['ACT']] != "login")	$IN["ACT"] = "offline";if (empty($IN["ACT"]))	$IN["ACT"] = "idx";if (array_key_exists($IN["ACT"], $action) and $action[$IN["ACT"]] != "modloader") {	$clang->loadLangFile("lang_" . $action[$IN["ACT"]], 0);}$clang->loadLangFile("lang_global");$clang->loadLangFile("lang_warn");$clang->loadLangFile("lang_error");$modloader->loadLanguages();// Catch any user db errorsif ($guser->errormsg)	$std->error($guser->errormsg);if ($guser->getPermissions() & k_useSessionIDs)	$IN['sid'] = $std->createSession();//ob_start();if (array_key_exists($IN["ACT"], $action) and $action[$IN["ACT"]] != "modloader") {	// try to load from engine directory first then functions	if (file_exists(ROOT_PATH . "/engine/" . $action[$IN["ACT"]] . ".php"))		require(ROOT_PATH . "/engine/" . $action[$IN["ACT"]] . ".php");	else		require(ROOT_PATH . "/functions/" . $action[$IN["ACT"]] . ".php");	//$main_content = ob_get_contents();} else if ($action[$IN["ACT"]] == "modloader") {	$modloader->loadModule($IN["ACT"]);} else {	$std->error("Invalid page requested");}//ob_end_clean();$std->userOptions();$std->userBar();$OUTPUT->print_output();// Run any outstanding tasks$taskmgr->RunTasks();$guser->userdb->close_db();$DB->close_db();?>